namespace Raybod.SCM.Utility.Extention
{
    public class DebitCardValidator
    {
        /// <summary>
        /// شماره روی کارت های اعتباری یا کارت های بانکی شماره ای است 16 رقمی <br/>
        ///  که از سمت چپ رقم اول بیانگر نوع یا کاربرد کارت (برای کارت های بانکی و اعتباری این رقم می تواند 4 یا 5 یا 6 باشد )
        ///  <br/> و 5 رقم بعدی بیانگر شماره شناسایی صادر کننده کارت <br/>
        ///  و ارقام 7 تا 15 بیانگر شماره حساب یا شماره منحصر به فرد در مرکز صادرکننده کارت  <br/>
        /// و رقم آخر آن هم یک رقم کنترل است که از روی 15 رقم سمت چپ بدست می آید.  <br/>
        /// برای بررسی کنترل کد کافی است مجدد از روی 15 رقم سمت چپ صحت رقم کنترل را محاسبه کنیم
        /// <br/>
        /// برای محاسبه رقم کنترل از روی سایر ارقام ،  <br/>
        /// از سمت چپ و با شروع از موقعیت 1 تا موقعیت 16 ، ار <br/>
        /// قام موقعیت فرد را در 2 و ارقام موقعیت زوج را در یک ضرب می کنیم، <br/>
        ///  اگر حاصل ضرب هر مرحله بیشتر از  9 شد  9 واحد از آن کم کنید  تا یک رقمی شود  <br/>
        /// و سپس اعداد حاصل را با هم جمع می کنیم.
        /// <br/>
        /// اگر عدد حاصل از اجرای مرحله یک بر 10 بخش پذیر باشد ، شماره کارت صحیح قلمداد می شود  در غیر اینصورت شماره کارت صحیح نمی باشد
        /// </summary>
        /// <param name="code"></param>
        /// <returns></returns>
        public static bool IsValid(string code)
        {
            try
            {
                var length = code.Length;
                if (length < 16 || long.Parse(code.Substring(1, 10)) == 0 || long.Parse(code.Substring(10, 6)) == 0) return false;
                var c = long.Parse(code.Substring(15, 1));
                var s = 0;
                for (var i = 0; i < 16; i++)
                {
                    var k = (i % 2 == 0) ? 2 : 1;
                    var d = int.Parse(code.Substring(i, 1)) * k;
                    s += (d > 9) ? d - 9 : d;
                }
                return s % 10 == 0;
            }
            catch (System.Exception)
            {
                //ignore
            }
            return false;
        }
    }
}