// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Raybod.SCM.DataAccess.Context;

namespace Raybod.SCM.DataAccess.Migrations
{
    [DbContext(typeof(SqlServerSCMContext))]
    [Migration("20211120072848_v_35")]
    partial class v_35
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Raybod.SCM.Domain.Model.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdderUserId")
                        .HasColumnType("int");

                    b.Property<int>("AddressType")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeliveryLocation")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.Property<int?>("ModifierUserId")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(14)")
                        .HasMaxLength(14);

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(800)")
                        .HasMaxLength(800);

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AdderUserId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ModifierUserId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.Area", b =>
                {
                    b.Property<int>("AreaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdderUserId")
                        .HasColumnType("int");

                    b.Property<string>("AreaTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("ContractCode")
                        .HasColumnType("varchar(60)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifierUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("AreaId");

                    b.HasIndex("AdderUserId");

                    b.HasIndex("ContractCode");

                    b.HasIndex("ModifierUserId");

                    b.ToTable("Areas");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.BomProduct", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdderUserId")
                        .HasColumnType("int");

                    b.Property<int?>("AreaId")
                        .HasColumnType("int");

                    b.Property<decimal>("CoefficientUse")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("MaterialType")
                        .HasColumnType("int");

                    b.Property<int?>("ModifierUserId")
                        .HasColumnType("int");

                    b.Property<long?>("ParentBomId")
                        .HasColumnType("bigint");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AdderUserId");

                    b.HasIndex("AreaId");

                    b.HasIndex("ModifierUserId");

                    b.HasIndex("ParentBomId");

                    b.HasIndex("ProductId");

                    b.ToTable("BomProducts");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProvinceId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.CommunicationAttachment", b =>
                {
                    b.Property<long>("CommunicationAttachmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdderUserId")
                        .HasColumnType("int");

                    b.Property<long?>("CommunicationQuestionId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CommunicationReplyId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CommunicationTeamCommentId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("DocumentCommunicationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DocumentTQNCRId")
                        .HasColumnType("bigint");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("FileSrc")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifierUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CommunicationAttachmentId");

                    b.HasIndex("AdderUserId");

                    b.HasIndex("CommunicationQuestionId");

                    b.HasIndex("CommunicationReplyId");

                    b.HasIndex("CommunicationTeamCommentId");

                    b.HasIndex("DocumentCommunicationId");

                    b.HasIndex("DocumentTQNCRId");

                    b.HasIndex("ModifierUserId");

                    b.ToTable("CommunicationAttachments");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.CommunicationQuestion", b =>
                {
                    b.Property<long>("CommunicationQuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdderUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("DocumentCommunicationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DocumentTQNCRId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsReplyed")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifierUserId")
                        .HasColumnType("int");

                    b.Property<long?>("ParentQuestionId")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CommunicationQuestionId");

                    b.HasIndex("AdderUserId");

                    b.HasIndex("DocumentCommunicationId");

                    b.HasIndex("DocumentTQNCRId");

                    b.HasIndex("ModifierUserId");

                    b.HasIndex("ParentQuestionId");

                    b.ToTable("CommunicationQuestions");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.CommunicationReply", b =>
                {
                    b.Property<long>("CommunicationReplyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdderUserId")
                        .HasColumnType("int");

                    b.Property<long>("CommunicationQuestionId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ModifierUserId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CommunicationReplyId");

                    b.HasIndex("AdderUserId");

                    b.HasIndex("CommunicationQuestionId")
                        .IsUnique();

                    b.HasIndex("ModifierUserId");

                    b.ToTable("CommunicationReplys");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.CommunicationTeamComment", b =>
                {
                    b.Property<long>("CommunicationTeamCommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdderUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("DocumentCommunicationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DocumentTQNCRId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ModifierUserId")
                        .HasColumnType("int");

                    b.Property<long?>("ParentCommentId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CommunicationTeamCommentId");

                    b.HasIndex("AdderUserId");

                    b.HasIndex("DocumentCommunicationId");

                    b.HasIndex("DocumentTQNCRId");

                    b.HasIndex("ModifierUserId");

                    b.HasIndex("ParentCommentId");

                    b.ToTable("CommunicationTeamComments");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.CommunicationTeamCommentUser", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<long>("CommunicationTeamCommentId")
                        .HasColumnType("bigint");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "CommunicationTeamCommentId");

                    b.HasIndex("CommunicationTeamCommentId");

                    b.ToTable("CommunicationTeamCommentUsers");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(300)")
                        .HasMaxLength(300);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(60)")
                        .HasMaxLength(60);

                    b.Property<string>("EconomicCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(300)")
                        .HasMaxLength(300);

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(300)")
                        .HasMaxLength(300);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("NameEnglish")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("NationalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegistrationCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("TellPhone")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(300)")
                        .HasMaxLength(300);

                    b.HasKey("Id");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.CompanyUser", b =>
                {
                    b.Property<int>("CompanyUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdderUserId")
                        .HasColumnType("int");

                    b.Property<int?>("ConsultantId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int?>("ModifierUserId")
                        .HasColumnType("int");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CompanyUserId");

                    b.HasIndex("AdderUserId");

                    b.HasIndex("ConsultantId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ModifierUserId");

                    b.HasIndex("SupplierId");

                    b.ToTable("CompanyUsers");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.ConfirmationWorkFlow", b =>
                {
                    b.Property<long>("ConfirmationWorkFlowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdderUserId")
                        .HasColumnType("int");

                    b.Property<string>("ConfirmNote")
                        .HasColumnType("nvarchar(800)")
                        .HasMaxLength(800);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("DocumentRevisionId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifierUserId")
                        .HasColumnType("int");

                    b.Property<int?>("RevisionPageNumber")
                        .HasColumnType("int");

                    b.Property<string>("RevisionPageSize")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ConfirmationWorkFlowId");

                    b.HasIndex("AdderUserId");

                    b.HasIndex("DocumentRevisionId");

                    b.HasIndex("ModifierUserId");

                    b.ToTable("ConfirmationWorkFlows");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.ConfirmationWorkFlowTemplate", b =>
                {
                    b.Property<long>("ConfirmationWorkFlowTemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdderUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DocumentGroupId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifierUserId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ConfirmationWorkFlowTemplateId");

                    b.HasIndex("AdderUserId");

                    b.HasIndex("DocumentGroupId");

                    b.HasIndex("ModifierUserId");

                    b.ToTable("ConfirmationWorkFlowTemplates");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.ConfirmationWorkFlowTemplateUser", b =>
                {
                    b.Property<long>("ConfirmationWorkFlowTemplateUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ConfirmationWorkFlowTemplateId")
                        .HasColumnType("bigint");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ConfirmationWorkFlowTemplateUserId");

                    b.HasIndex("ConfirmationWorkFlowTemplateId");

                    b.HasIndex("UserId");

                    b.ToTable("ConfirmationWorkFlowTemplateUsers");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.ConfirmationWorkFlowUser", b =>
                {
                    b.Property<long>("ConfirmationWorkFlowUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ConfirmationWorkFlowId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateStart")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAccept")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBallInCourt")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(800)")
                        .HasMaxLength(800);

                    b.Property<int>("OrderNumber")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ConfirmationWorkFlowUserId");

                    b.HasIndex("ConfirmationWorkFlowId");

                    b.HasIndex("UserId");

                    b.ToTable("ConfirmationWorkFlowUsers");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.Consultant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdderUserId")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(300)")
                        .HasMaxLength(300);

                    b.Property<string>("ConsultantCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(300)")
                        .HasMaxLength(300);

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(300)")
                        .HasMaxLength(300);

                    b.Property<int?>("ModifierUserId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(12)")
                        .HasMaxLength(12);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("TellPhone")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(300)")
                        .HasMaxLength(300);

                    b.HasKey("Id");

                    b.HasIndex("AdderUserId");

                    b.HasIndex("ModifierUserId");

                    b.ToTable("Consultants");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.Contract", b =>
                {
                    b.Property<string>("ContractCode")
                        .HasColumnType("varchar(60)");

                    b.Property<int?>("AdderUserId")
                        .HasColumnType("int");

                    b.Property<int?>("ConsultantId")
                        .HasColumnType("int");

                    b.Property<int>("ContractDuration")
                        .HasColumnType("int");

                    b.Property<string>("ContractNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<int>("ContractStatus")
                        .HasColumnType("int");

                    b.Property<int>("ContractType")
                        .HasColumnType("int");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateEffective")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateIssued")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(800)")
                        .HasMaxLength(800);

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifierUserId")
                        .HasColumnType("int");

                    b.Property<string>("ParnetContractCode")
                        .HasColumnType("varchar(60)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ContractCode");

                    b.HasIndex("AdderUserId");

                    b.HasIndex("ConsultantId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ModifierUserId");

                    b.HasIndex("ParnetContractCode");

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.ContractAddress", b =>
                {
                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("ContractCode")
                        .HasColumnType("varchar(60)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("AddressId", "ContractCode");

                    b.HasIndex("ContractCode");

                    b.ToTable("ContractAddresses");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.ContractAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdderUserId")
                        .HasColumnType("int");

                    b.Property<string>("ContractCode")
                        .HasColumnType("varchar(60)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(300)")
                        .HasMaxLength(300);

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("FileSrc")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("FileType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifierUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AdderUserId");

                    b.HasIndex("ContractCode");

                    b.HasIndex("ModifierUserId");

                    b.ToTable("ContractAttachments");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.ContractDocumentGroupList", b =>
                {
                    b.Property<long>("ContractDocumentGroupListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdderUserId")
                        .HasColumnType("int");

                    b.Property<string>("ContractCode")
                        .HasColumnType("varchar(60)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DocumentGroupId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifierUserId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ContractDocumentGroupListId");

                    b.HasIndex("AdderUserId");

                    b.HasIndex("ContractCode");

                    b.HasIndex("DocumentGroupId");

                    b.HasIndex("ModifierUserId");

                    b.ToTable("ContractDocumentGroupLists");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.ContractFormConfig", b =>
                {
                    b.Property<long>("ContractFormConfigId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CodingType")
                        .HasColumnType("int");

                    b.Property<string>("ContractCode")
                        .HasColumnType("varchar(60)");

                    b.Property<string>("FixedPart")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FormName")
                        .HasColumnType("int");

                    b.Property<int>("LengthOfSequence")
                        .HasColumnType("int");

                    b.HasKey("ContractFormConfigId");

                    b.HasIndex("ContractCode");

                    b.ToTable("ContractFormConfigs");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.ContractSubject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdderUserId")
                        .HasColumnType("int");

                    b.Property<decimal>("BalanceingRate")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("ContractCode")
                        .IsRequired()
                        .HasColumnType("varchar(60)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDoneMrp")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifierUserId")
                        .HasColumnType("int");

                    b.Property<decimal>("PriceTotal")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("PriceUnit")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AdderUserId");

                    b.HasIndex("ContractCode");

                    b.HasIndex("ModifierUserId");

                    b.HasIndex("ProductId");

                    b.ToTable("ContractSubjects");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdderUserId")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(300)")
                        .HasMaxLength(300);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(300)")
                        .HasMaxLength(300);

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(300)")
                        .HasMaxLength(300);

                    b.Property<int?>("ModifierUserId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(12)")
                        .HasMaxLength(12);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("TellPhone")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(300)")
                        .HasMaxLength(300);

                    b.HasKey("Id");

                    b.HasIndex("AdderUserId");

                    b.HasIndex("ModifierUserId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.Document", b =>
                {
                    b.Property<long>("DocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdderUserId")
                        .HasColumnType("int");

                    b.Property<int?>("AreaId")
                        .HasColumnType("int");

                    b.Property<string>("ClientDocNumber")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("CommunicationCommentStatus")
                        .HasColumnType("int");

                    b.Property<long?>("ConfirmationWorkFlowTemplateId")
                        .HasColumnType("bigint");

                    b.Property<string>("ContractCode")
                        .HasColumnType("varchar(60)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DocClass")
                        .HasColumnType("int");

                    b.Property<string>("DocNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<string>("DocRemark")
                        .HasColumnType("nvarchar(800)")
                        .HasMaxLength(800);

                    b.Property<string>("DocTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<int>("DocumentGroupId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRequiredTransmittal")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifierUserId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DocumentId");

                    b.HasIndex("AdderUserId");

                    b.HasIndex("AreaId");

                    b.HasIndex("ConfirmationWorkFlowTemplateId");

                    b.HasIndex("ContractCode");

                    b.HasIndex("DocNumber")
                        .IsUnique();

                    b.HasIndex("DocumentGroupId");

                    b.HasIndex("ModifierUserId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.DocumentCommunication", b =>
                {
                    b.Property<long>("DocumentCommunicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdderUserId")
                        .HasColumnType("int");

                    b.Property<int>("CommentStatus")
                        .HasColumnType("int");

                    b.Property<string>("CommunicationCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<int>("CommunicationStatus")
                        .HasColumnType("int");

                    b.Property<int>("CommunicationType")
                        .HasColumnType("int");

                    b.Property<int>("CompanyIssue")
                        .HasColumnType("int");

                    b.Property<int?>("ConsultantId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<long>("DocumentRevisionId")
                        .HasColumnType("bigint");

                    b.Property<int?>("ModifierUserId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DocumentCommunicationId");

                    b.HasIndex("AdderUserId");

                    b.HasIndex("CommunicationCode")
                        .IsUnique();

                    b.HasIndex("ConsultantId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DocumentRevisionId");

                    b.HasIndex("ModifierUserId");

                    b.ToTable("DocumentCommunications");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.DocumentGroup", b =>
                {
                    b.Property<int>("DocumentGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdderUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DocumentGroupCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifierUserId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DocumentGroupId");

                    b.HasIndex("AdderUserId");

                    b.HasIndex("ModifierUserId");

                    b.ToTable("DocumentGroups");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.DocumentProduct", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<long>("DocumentId")
                        .HasColumnType("bigint");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.HasKey("ProductId", "DocumentId");

                    b.HasIndex("DocumentId");

                    b.ToTable("DocumentProducts");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.DocumentRevision", b =>
                {
                    b.Property<long>("DocumentRevisionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdderUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(800)")
                        .HasMaxLength(800);

                    b.Property<long>("DocumentId")
                        .HasColumnType("bigint");

                    b.Property<string>("DocumentRevisionCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLastConfirmRevision")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLastRevision")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifierUserId")
                        .HasColumnType("int");

                    b.Property<int?>("RevisionPageNumber")
                        .HasColumnType("int");

                    b.Property<string>("RevisionPageSize")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<int>("RevisionStatus")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DocumentRevisionId");

                    b.HasIndex("AdderUserId");

                    b.HasIndex("DocumentId");

                    b.HasIndex("ModifierUserId");

                    b.ToTable("DocumentRevisions");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.DocumentTQNCR", b =>
                {
                    b.Property<long>("DocumentTQNCRId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdderUserId")
                        .HasColumnType("int");

                    b.Property<string>("CommunicationCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<int>("CommunicationStatus")
                        .HasColumnType("int");

                    b.Property<int>("CommunicationType")
                        .HasColumnType("int");

                    b.Property<int>("CompanyIssue")
                        .HasColumnType("int");

                    b.Property<int?>("ConsultantId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<long>("DocumentRevisionId")
                        .HasColumnType("bigint");

                    b.Property<int?>("ModifierUserId")
                        .HasColumnType("int");

                    b.Property<int>("NCRReason")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DocumentTQNCRId");

                    b.HasIndex("AdderUserId");

                    b.HasIndex("CommunicationCode")
                        .IsUnique();

                    b.HasIndex("ConsultantId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DocumentRevisionId");

                    b.HasIndex("ModifierUserId");

                    b.HasIndex("SupplierId");

                    b.ToTable("DocumentTQNCRs");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.FinancialAccount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CurrencyType")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateDone")
                        .HasColumnType("datetime2");

                    b.Property<int>("FinancialAccountType")
                        .HasColumnType("int");

                    b.Property<decimal>("InitialAccount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<long?>("InvoiceId")
                        .HasColumnType("bigint");

                    b.Property<long?>("POId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("PaymentAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<long?>("PaymentId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("PurchaseAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("RejectPurchaseAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("RemainedAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId")
                        .IsUnique()
                        .HasFilter("[InvoiceId] IS NOT NULL");

                    b.HasIndex("POId");

                    b.HasIndex("PaymentId")
                        .IsUnique()
                        .HasFilter("[PaymentId] IS NOT NULL");

                    b.HasIndex("SupplierId");

                    b.ToTable("FinancialAccounts");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.Invoice", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdderUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CurrencyType")
                        .HasColumnType("int");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<int>("InvoiceStatus")
                        .HasColumnType("int");

                    b.Property<int>("InvoiceType")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifierUserId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(800)")
                        .HasMaxLength(800);

                    b.Property<decimal>("OtherCosts")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("PContractType")
                        .HasColumnType("int");

                    b.Property<long?>("POId")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<decimal>("Tax")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("TotalDiscount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("TotalInvoiceAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("TotalProductAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("TotalTax")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AdderUserId");

                    b.HasIndex("InvoiceNumber")
                        .IsUnique();

                    b.HasIndex("ModifierUserId");

                    b.HasIndex("POId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.InvoiceProduct", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("InvoiceId")
                        .HasColumnType("bigint");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<decimal>("TotalProductAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("ProductId");

                    b.ToTable("InvoiceProducts");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.LogUserReceiver", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<Guid>("SCMAuditLogId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "SCMAuditLogId");

                    b.HasIndex("SCMAuditLogId");

                    b.ToTable("LogUserReceivers");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.Logistic", b =>
                {
                    b.Property<long>("LogisticId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdderUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateStart")
                        .HasColumnType("datetime2");

                    b.Property<int>("LogisticStatus")
                        .HasColumnType("int");

                    b.Property<int?>("ModifierUserId")
                        .HasColumnType("int");

                    b.Property<long>("PackId")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("Step")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("LogisticId");

                    b.HasIndex("AdderUserId");

                    b.HasIndex("ModifierUserId");

                    b.HasIndex("PackId");

                    b.ToTable("Logistics");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.MasterMR", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BomProductId")
                        .HasColumnType("int");

                    b.Property<string>("ContractCode")
                        .HasColumnType("varchar(60)");

                    b.Property<decimal>("GrossRequirement")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("RemainedGrossRequirement")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("BomProductId");

                    b.HasIndex("ContractCode");

                    b.HasIndex("ProductId");

                    b.ToTable("MasterMRs");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.Mrp", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdderUserId")
                        .HasColumnType("int");

                    b.Property<string>("ContractCode")
                        .HasColumnType("varchar(60)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(300)")
                        .HasMaxLength(300);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifierUserId")
                        .HasColumnType("int");

                    b.Property<string>("MrpNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<int>("MrpStatus")
                        .HasColumnType("int");

                    b.Property<int>("ProductGroupId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AdderUserId");

                    b.HasIndex("ContractCode");

                    b.HasIndex("ModifierUserId");

                    b.HasIndex("MrpNumber")
                        .IsUnique();

                    b.HasIndex("ProductGroupId");

                    b.ToTable("Mrps");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.MrpItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdderUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DoneStock")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("FinalRequirment")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("GrossRequirement")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("MasterMRId")
                        .HasColumnType("bigint");

                    b.Property<int?>("ModifierUserId")
                        .HasColumnType("int");

                    b.Property<long>("MrpId")
                        .HasColumnType("bigint");

                    b.Property<int>("MrpItemStatus")
                        .HasColumnType("int");

                    b.Property<decimal>("NetRequirement")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("PO")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("PR")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("RemainedStock")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("ReservedStock")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<decimal>("SurplusQuantity")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("WarehouseStock")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.HasIndex("AdderUserId");

                    b.HasIndex("MasterMRId");

                    b.HasIndex("ModifierUserId");

                    b.HasIndex("MrpId");

                    b.HasIndex("ProductId");

                    b.ToTable("MrpItems");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("BaseContratcCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDone")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("FormCode")
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<bool>("IsDone")
                        .HasColumnType("bit");

                    b.Property<string>("KeyValue")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(800)")
                        .HasMaxLength(800);

                    b.Property<int>("NotifEvent")
                        .HasColumnType("int");

                    b.Property<int>("PerformerUserId")
                        .HasColumnType("int");

                    b.Property<string>("Quantity")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("RootKeyValue")
                        .HasColumnType("nvarchar(44)")
                        .HasMaxLength(44);

                    b.Property<string>("RootKeyValue2")
                        .HasColumnType("nvarchar(44)")
                        .HasMaxLength(44);

                    b.Property<string>("Temp")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PerformerUserId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.Operation", b =>
                {
                    b.Property<Guid>("OperationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("AdderUserId")
                        .HasColumnType("int");

                    b.Property<int?>("AreaId")
                        .HasColumnType("int");

                    b.Property<string>("ContractCode")
                        .HasColumnType("varchar(60)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifierUserId")
                        .HasColumnType("int");

                    b.Property<string>("OperationCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<string>("OperationDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<int>("OperationGroupId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("OperationId");

                    b.HasIndex("AdderUserId");

                    b.HasIndex("AreaId");

                    b.HasIndex("ContractCode");

                    b.HasIndex("ModifierUserId");

                    b.HasIndex("OperationGroupId");

                    b.ToTable("Operations");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.OperationActivity", b =>
                {
                    b.Property<long>("OperationActivityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActivityOwnerId")
                        .HasColumnType("int");

                    b.Property<int?>("AdderUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<double>("Duration")
                        .HasColumnType("float");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifierUserId")
                        .HasColumnType("int");

                    b.Property<int>("OperationActivityStatus")
                        .HasColumnType("int");

                    b.Property<Guid>("OperationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ProgressPercent")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("OperationActivityId");

                    b.HasIndex("ActivityOwnerId");

                    b.HasIndex("AdderUserId");

                    b.HasIndex("ModifierUserId");

                    b.HasIndex("OperationId");

                    b.ToTable("OperationActivities");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.OperationActivityTimesheet", b =>
                {
                    b.Property<long>("ActivityTimesheetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdderUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateIssue")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifierUserId")
                        .HasColumnType("int");

                    b.Property<long>("OperationActivityId")
                        .HasColumnType("bigint");

                    b.Property<int>("ProgressPercent")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ActivityTimesheetId");

                    b.HasIndex("AdderUserId");

                    b.HasIndex("ModifierUserId");

                    b.HasIndex("OperationActivityId");

                    b.ToTable("OperationActivityTimesheets");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.OperationAttachment", b =>
                {
                    b.Property<long>("OperationAttachmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdderUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("FileSrc")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifierUserId")
                        .HasColumnType("int");

                    b.Property<long?>("OperationCommentId")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("OperationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("OperationAttachmentId");

                    b.HasIndex("AdderUserId");

                    b.HasIndex("ModifierUserId");

                    b.HasIndex("OperationCommentId");

                    b.HasIndex("OperationId");

                    b.ToTable("OperationAttachments");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.OperationComment", b =>
                {
                    b.Property<long>("OperationCommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdderUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ModifierUserId")
                        .HasColumnType("int");

                    b.Property<Guid>("OperationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("ParentCommentId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("OperationCommentId");

                    b.HasIndex("AdderUserId");

                    b.HasIndex("ModifierUserId");

                    b.HasIndex("OperationId");

                    b.HasIndex("ParentCommentId");

                    b.ToTable("OperationComments");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.OperationCommentUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("OperationCommentId")
                        .HasColumnType("bigint");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OperationCommentId");

                    b.HasIndex("UserId");

                    b.ToTable("OperationCommentUsers");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.OperationGroup", b =>
                {
                    b.Property<int>("OperationGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdderUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifierUserId")
                        .HasColumnType("int");

                    b.Property<string>("OperationGroupCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("OperationGroupId");

                    b.HasIndex("AdderUserId");

                    b.HasIndex("ModifierUserId");

                    b.ToTable("OperationGroups");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.OperationProgress", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdderUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifierUserId")
                        .HasColumnType("int");

                    b.Property<Guid>("OperationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ProgressPercent")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AdderUserId");

                    b.HasIndex("ModifierUserId");

                    b.HasIndex("OperationId");

                    b.ToTable("OperationProgresses");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.PAttachment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdderUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("FileSrc")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long?>("LogisticId")
                        .HasColumnType("bigint");

                    b.Property<int?>("ModifierUserId")
                        .HasColumnType("int");

                    b.Property<long?>("POCommentId")
                        .HasColumnType("bigint");

                    b.Property<long?>("POId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PRContractId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PackId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PurchaseRequestId")
                        .HasColumnType("bigint");

                    b.Property<long?>("QualityControlId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ReceiptId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ReceiptRejectId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AdderUserId");

                    b.HasIndex("LogisticId");

                    b.HasIndex("ModifierUserId");

                    b.HasIndex("POCommentId");

                    b.HasIndex("POId");

                    b.HasIndex("PRContractId");

                    b.HasIndex("PackId");

                    b.HasIndex("PurchaseRequestId");

                    b.HasIndex("QualityControlId");

                    b.HasIndex("ReceiptId");

                    b.HasIndex("ReceiptRejectId");

                    b.ToTable("PAttachments");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.PDFTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContractCode")
                        .HasColumnType("varchar(60)");

                    b.Property<int>("PDFTemplateType")
                        .HasColumnType("int");

                    b.Property<string>("Section1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Section2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Section3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Section4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Section5")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ContractCode");

                    b.ToTable("PDFTemplates");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.PO", b =>
                {
                    b.Property<long>("POId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdderUserId")
                        .HasColumnType("int");

                    b.Property<string>("BaseContractCode")
                        .HasColumnType("varchar(60)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CurrencyType")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateDelivery")
                        .HasColumnType("datetime2");

                    b.Property<int>("DeliveryLocation")
                        .HasColumnType("int");

                    b.Property<decimal>("FinalTotalAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifierUserId")
                        .HasColumnType("int");

                    b.Property<int>("PContractType")
                        .HasColumnType("int");

                    b.Property<string>("POCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("PORefType")
                        .HasColumnType("int");

                    b.Property<int>("POStatus")
                        .HasColumnType("int");

                    b.Property<long>("PRContractId")
                        .HasColumnType("bigint");

                    b.Property<int>("ProductGroupId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<decimal>("Tax")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("POId");

                    b.HasIndex("AdderUserId");

                    b.HasIndex("BaseContractCode");

                    b.HasIndex("ModifierUserId");

                    b.HasIndex("POCode")
                        .IsUnique()
                        .HasFilter("[POCode] IS NOT NULL");

                    b.HasIndex("PRContractId");

                    b.HasIndex("ProductGroupId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("SupplierId");

                    b.ToTable("POs");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.POActivity", b =>
                {
                    b.Property<long>("POActivityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActivityOwnerId")
                        .HasColumnType("int");

                    b.Property<int>("ActivityStatus")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<double>("Duration")
                        .HasColumnType("float");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("POId")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("POActivityId");

                    b.HasIndex("ActivityOwnerId");

                    b.HasIndex("POId");

                    b.ToTable("POActivities");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.POActivityTimesheet", b =>
                {
                    b.Property<long>("ActivityTimesheetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdderUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateIssue")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifierUserId")
                        .HasColumnType("int");

                    b.Property<long>("POActivityId")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ActivityTimesheetId");

                    b.HasIndex("AdderUserId");

                    b.HasIndex("ModifierUserId");

                    b.HasIndex("POActivityId");

                    b.ToTable("POActivityTimesheets");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.POComment", b =>
                {
                    b.Property<long>("POCommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdderUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ModifierUserId")
                        .HasColumnType("int");

                    b.Property<long>("POId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ParentCommentId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("POCommentId");

                    b.HasIndex("AdderUserId");

                    b.HasIndex("ModifierUserId");

                    b.HasIndex("POId");

                    b.HasIndex("ParentCommentId");

                    b.ToTable("POComments");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.POCommentUser", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<long>("POCommentId")
                        .HasColumnType("bigint");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "POCommentId");

                    b.HasIndex("POCommentId");

                    b.ToTable("POCommentUsers");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.POService", b =>
                {
                    b.Property<long>("POId")
                        .HasColumnType("bigint");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<decimal>("PriceUnit")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("RemainedQuantity")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("POId", "ServiceId");

                    b.HasIndex("ServiceId");

                    b.ToTable("POService");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.POStatusLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdderUserId")
                        .HasColumnType("int");

                    b.Property<int>("BeforeStatus")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDone")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifierUserId")
                        .HasColumnType("int");

                    b.Property<long>("POId")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AdderUserId");

                    b.HasIndex("ModifierUserId");

                    b.HasIndex("POId");

                    b.ToTable("POStatusLogs");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.POSubject", b =>
                {
                    b.Property<long>("POSubjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("CoefficientUse")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<long?>("MrpItemId")
                        .HasColumnType("bigint");

                    b.Property<long?>("POId")
                        .HasColumnType("bigint");

                    b.Property<int>("POSubjectPartInvoiceStatus")
                        .HasColumnType("int");

                    b.Property<long?>("ParentSubjectId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("PriceUnit")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("ReceiptedQuantity")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("RemainedQuantity")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<decimal>("ShortageQuantity")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("POSubjectId");

                    b.HasIndex("MrpItemId");

                    b.HasIndex("POId");

                    b.HasIndex("ParentSubjectId");

                    b.HasIndex("ProductId");

                    b.ToTable("POSubjects");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.POTermsOfPayment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdderUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreditDuration")
                        .HasColumnType("int");

                    b.Property<bool>("IsCreditPayment")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifierUserId")
                        .HasColumnType("int");

                    b.Property<long?>("POId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PRContractId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("PaymentPercentage")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("int");

                    b.Property<int>("PaymentStep")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AdderUserId");

                    b.HasIndex("ModifierUserId");

                    b.HasIndex("POId");

                    b.HasIndex("PRContractId");

                    b.ToTable("PoTermsOfPayments");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.PRConfirmLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdderUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsConfirm")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifierUserId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(800)")
                        .HasMaxLength(800);

                    b.Property<long>("PurchaseRequestId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AdderUserId");

                    b.HasIndex("ModifierUserId");

                    b.HasIndex("PurchaseRequestId");

                    b.ToTable("PRConfirmLogs");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.PRContract", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdderUserId")
                        .HasColumnType("int");

                    b.Property<string>("BaseContractCode")
                        .HasColumnType("varchar(60)");

                    b.Property<int>("ContractDuration")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CurrencyType")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateIssued")
                        .HasColumnType("datetime2");

                    b.Property<int>("DeliveryLocation")
                        .HasColumnType("int");

                    b.Property<decimal>("FinalTotalAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("ModifierUserId")
                        .HasColumnType("int");

                    b.Property<int>("PContractType")
                        .HasColumnType("int");

                    b.Property<string>("PRContractCode")
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<int>("PRContractStatus")
                        .HasColumnType("int");

                    b.Property<int>("ProductGroupId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<decimal>("Tax")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AdderUserId");

                    b.HasIndex("ModifierUserId");

                    b.HasIndex("PRContractCode")
                        .IsUnique()
                        .HasFilter("[PRContractCode] IS NOT NULL");

                    b.HasIndex("ProductGroupId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("SupplierId");

                    b.ToTable("PRContracts");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.PRContractService", b =>
                {
                    b.Property<long>("PRContractId")
                        .HasColumnType("bigint");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<decimal>("PriceUnit")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("RemainedQuantity")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("PRContractId", "ServiceId");

                    b.HasIndex("ServiceId");

                    b.ToTable("PRContractServices");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.PRContractSubject", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdderUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DeliveredQuantity")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifierUserId")
                        .HasColumnType("int");

                    b.Property<long>("PRContractId")
                        .HasColumnType("bigint");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<long>("RFPItemId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("RemainedQuantityToInvoice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("RemainedStock")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("ReservedStock")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AdderUserId");

                    b.HasIndex("ModifierUserId");

                    b.HasIndex("PRContractId");

                    b.HasIndex("ProductId");

                    b.HasIndex("RFPItemId");

                    b.ToTable("PRContractSubjects");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.PRContractSubjectPartList", b =>
                {
                    b.Property<long>("PRContractSubjectId")
                        .HasColumnType("bigint");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("CoefficientUse")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("PRContractSubjectId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("PRContractSubjectPartLists");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.Pack", b =>
                {
                    b.Property<long>("PackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdderUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifierUserId")
                        .HasColumnType("int");

                    b.Property<long>("POId")
                        .HasColumnType("bigint");

                    b.Property<string>("PackCode")
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<int>("PackStatus")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("PackId");

                    b.HasIndex("AdderUserId");

                    b.HasIndex("ModifierUserId");

                    b.HasIndex("POId");

                    b.HasIndex("PackCode")
                        .IsUnique()
                        .HasFilter("[PackCode] IS NOT NULL");

                    b.ToTable("Packs");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.PackSubject", b =>
                {
                    b.Property<long>("PackSubjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("PackId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ParentSubjectId")
                        .HasColumnType("bigint");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<decimal>("ShortageQuantity")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("PackSubjectId");

                    b.HasIndex("PackId");

                    b.HasIndex("ParentSubjectId");

                    b.HasIndex("ProductId");

                    b.ToTable("PackingSubjects");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.Payment", b =>
                {
                    b.Property<long>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdderUserId")
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("ContractCode")
                        .HasColumnType("varchar(60)")
                        .HasMaxLength(60);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CurrencyType")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifierUserId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(800)")
                        .HasMaxLength(800);

                    b.Property<string>("PaymentNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("PaymentId");

                    b.HasIndex("AdderUserId");

                    b.HasIndex("ContractCode");

                    b.HasIndex("ModifierUserId");

                    b.HasIndex("PaymentNumber")
                        .IsUnique();

                    b.HasIndex("SupplierId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.PaymentAttachment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdderUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(300)")
                        .HasMaxLength(300);

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("FileSrc")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("FileType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("InvoiceId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifierUserId")
                        .HasColumnType("int");

                    b.Property<long?>("PaymentId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AdderUserId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("ModifierUserId");

                    b.HasIndex("PaymentId");

                    b.ToTable("PaymentAttachments");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.PaymentPendingForPayment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("PaymentAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<long>("PaymentId")
                        .HasColumnType("bigint");

                    b.Property<long>("PendingForPaymentId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PaymentId");

                    b.HasIndex("PendingForPaymentId");

                    b.ToTable("PaymentPendingForPayments");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.PendingForPayment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdderUserId")
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("AmountPayed")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("AmountRemained")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("BaseContractCode")
                        .HasColumnType("varchar(60)")
                        .HasMaxLength(60);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("InvoiceId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifierUserId")
                        .HasColumnType("int");

                    b.Property<long?>("POId")
                        .HasColumnType("bigint");

                    b.Property<long?>("POTermsOfPaymentId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PRContractId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("PaymentDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("PendingForPaymentNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AdderUserId");

                    b.HasIndex("BaseContractCode");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("ModifierUserId");

                    b.HasIndex("POId");

                    b.HasIndex("POTermsOfPaymentId");

                    b.HasIndex("PRContractId");

                    b.HasIndex("PendingForPaymentNumber")
                        .IsUnique();

                    b.HasIndex("SupplierId");

                    b.ToTable("PendingForPayments");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdderUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(400)")
                        .HasMaxLength(400);

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(300)")
                        .HasMaxLength(300);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifierUserId")
                        .HasColumnType("int");

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(60)")
                        .HasMaxLength(60);

                    b.Property<int>("ProductGroupId")
                        .HasColumnType("int");

                    b.Property<int>("ProductType")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("TechnicalNumber")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AdderUserId");

                    b.HasIndex("Description")
                        .IsUnique();

                    b.HasIndex("ModifierUserId");

                    b.HasIndex("ProductCode")
                        .IsUnique();

                    b.HasIndex("ProductGroupId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.ProductGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdderUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifierUserId")
                        .HasColumnType("int");

                    b.Property<string>("ProductGroupCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(60)")
                        .HasMaxLength(60);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AdderUserId");

                    b.HasIndex("ModifierUserId");

                    b.HasIndex("ProductGroupCode")
                        .IsUnique();

                    b.ToTable("ProductGroups");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.ProductUnit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("ProductUnits");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.Province", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Provinces");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.PurchaseRequest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdderUserId")
                        .HasColumnType("int");

                    b.Property<string>("ConfirmNote")
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(2147483647);

                    b.Property<string>("ContractCode")
                        .HasColumnType("varchar(60)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifierUserId")
                        .HasColumnType("int");

                    b.Property<long?>("MrpId")
                        .HasColumnType("bigint");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(2147483647);

                    b.Property<string>("PRCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<int>("PRStatus")
                        .HasColumnType("int");

                    b.Property<int>("ProductGroupId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("TypeOfInquiry")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AdderUserId");

                    b.HasIndex("ContractCode");

                    b.HasIndex("ModifierUserId");

                    b.HasIndex("MrpId");

                    b.HasIndex("PRCode")
                        .IsUnique();

                    b.HasIndex("ProductGroupId");

                    b.ToTable("PurchaseRequests");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.PurchaseRequestItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdderUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifierUserId")
                        .HasColumnType("int");

                    b.Property<int>("PRItemStatus")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<long>("PurchaseRequestId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Quntity")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AdderUserId");

                    b.HasIndex("ModifierUserId");

                    b.HasIndex("ProductId");

                    b.HasIndex("PurchaseRequestId");

                    b.ToTable("PurchaseRequestItems");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.QualityControl", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdderUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifierUserId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(800)")
                        .HasMaxLength(800);

                    b.Property<long?>("PackId")
                        .HasColumnType("bigint");

                    b.Property<int>("QCResult")
                        .HasColumnType("int");

                    b.Property<long?>("ReceiptId")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AdderUserId");

                    b.HasIndex("ModifierUserId");

                    b.HasIndex("PackId");

                    b.HasIndex("ReceiptId")
                        .IsUnique()
                        .HasFilter("[ReceiptId] IS NOT NULL");

                    b.ToTable("QualityControls");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.RFP", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdderUserId")
                        .HasColumnType("int");

                    b.Property<string>("ContractCode")
                        .HasColumnType("varchar(60)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateDue")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifierUserId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(800)")
                        .HasMaxLength(800);

                    b.Property<int>("ProductGroupId")
                        .HasColumnType("int");

                    b.Property<string>("RFPNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<int>("RFPType")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AdderUserId");

                    b.HasIndex("ContractCode");

                    b.HasIndex("ModifierUserId");

                    b.HasIndex("ProductGroupId");

                    b.HasIndex("RFPNumber")
                        .IsUnique();

                    b.ToTable("RFPs");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.RFPAttachment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdderUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("FileSrc")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifierUserId")
                        .HasColumnType("int");

                    b.Property<long?>("RFPCommentId")
                        .HasColumnType("bigint");

                    b.Property<long?>("RFPId")
                        .HasColumnType("bigint");

                    b.Property<long?>("RFPInqueryId")
                        .HasColumnType("bigint");

                    b.Property<long?>("RFPSupplierProposalId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AdderUserId");

                    b.HasIndex("ModifierUserId");

                    b.HasIndex("RFPCommentId");

                    b.HasIndex("RFPId");

                    b.HasIndex("RFPInqueryId");

                    b.HasIndex("RFPSupplierProposalId");

                    b.ToTable("RFPAttachments");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.RFPComment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdderUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ModifierUserId")
                        .HasColumnType("int");

                    b.Property<long?>("ParentCommentId")
                        .HasColumnType("bigint");

                    b.Property<int>("RFPInqueryType")
                        .HasColumnType("int");

                    b.Property<long>("RFPSupplierId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AdderUserId");

                    b.HasIndex("ModifierUserId");

                    b.HasIndex("ParentCommentId");

                    b.HasIndex("RFPSupplierId");

                    b.ToTable("RFPComments");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.RFPCommentInquery", b =>
                {
                    b.Property<long>("RFPCommentId")
                        .HasColumnType("bigint");

                    b.Property<long>("RFPInqueryId")
                        .HasColumnType("bigint");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.HasKey("RFPCommentId", "RFPInqueryId");

                    b.HasIndex("RFPInqueryId");

                    b.ToTable("RFPCommentInqueries");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.RFPCommentUser", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<long>("RFPCommentId")
                        .HasColumnType("bigint");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "RFPCommentId");

                    b.HasIndex("RFPCommentId");

                    b.ToTable("RFPCommentUsers");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.RFPInquery", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdderUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DefaultInquery")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifierUserId")
                        .HasColumnType("int");

                    b.Property<long>("RFPId")
                        .HasColumnType("bigint");

                    b.Property<int>("RFPInqueryType")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.HasIndex("AdderUserId");

                    b.HasIndex("ModifierUserId");

                    b.HasIndex("RFPId");

                    b.ToTable("RFPInqueries");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.RFPItems", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdderUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifierUserId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<long?>("PurchaseRequestItemId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<long>("RFPId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("RemainedStock")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AdderUserId");

                    b.HasIndex("ModifierUserId");

                    b.HasIndex("ProductId");

                    b.HasIndex("PurchaseRequestItemId");

                    b.HasIndex("RFPId");

                    b.ToTable("RFPItems");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.RFPStatusLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateIssued")
                        .HasColumnType("datetime2");

                    b.Property<long>("RFPId")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RFPId");

                    b.ToTable("RFPStatusLogs");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.RFPSupplier", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdderUserId")
                        .HasColumnType("int");

                    b.Property<string>("CBENote")
                        .HasColumnType("nvarchar(800)")
                        .HasMaxLength(800);

                    b.Property<decimal>("CBEScore")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWinner")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifierUserId")
                        .HasColumnType("int");

                    b.Property<long>("RFPId")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<string>("TBENote")
                        .HasColumnType("nvarchar(800)")
                        .HasMaxLength(800);

                    b.Property<decimal>("TBEScore")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AdderUserId");

                    b.HasIndex("ModifierUserId");

                    b.HasIndex("RFPId");

                    b.HasIndex("SupplierId");

                    b.ToTable("RFPSuppliers");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.RFPSupplierProposal", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdderUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("EvaluationScore")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<bool>("IsAnswered")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEvaluated")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifierUserId")
                        .HasColumnType("int");

                    b.Property<long>("RFPInqueryId")
                        .HasColumnType("bigint");

                    b.Property<long>("RFPSupplierId")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AdderUserId");

                    b.HasIndex("ModifierUserId");

                    b.HasIndex("RFPInqueryId");

                    b.HasIndex("RFPSupplierId");

                    b.ToTable("RFPSupplierProposals");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.Receipt", b =>
                {
                    b.Property<long>("ReceiptId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdderUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("InvoiceId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifierUserId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(800)")
                        .HasMaxLength(800);

                    b.Property<long>("POId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PackId")
                        .HasColumnType("bigint");

                    b.Property<string>("ReceiptCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<int>("ReceiptStatus")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ReceiptId");

                    b.HasIndex("AdderUserId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("ModifierUserId");

                    b.HasIndex("POId");

                    b.HasIndex("PackId")
                        .IsUnique()
                        .HasFilter("[PackId] IS NOT NULL");

                    b.HasIndex("ReceiptCode")
                        .IsUnique();

                    b.HasIndex("SupplierId");

                    b.ToTable("Receipts");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.ReceiptReject", b =>
                {
                    b.Property<long>("ReceiptRejectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdderUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("InvoiceId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifierUserId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(800)")
                        .HasMaxLength(800);

                    b.Property<long>("POId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PackId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ReceiptId")
                        .HasColumnType("bigint");

                    b.Property<string>("ReceiptRejectCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ReceiptRejectId");

                    b.HasIndex("AdderUserId");

                    b.HasIndex("InvoiceId")
                        .IsUnique()
                        .HasFilter("[InvoiceId] IS NOT NULL");

                    b.HasIndex("ModifierUserId");

                    b.HasIndex("POId");

                    b.HasIndex("PackId");

                    b.HasIndex("ReceiptId");

                    b.HasIndex("ReceiptRejectCode")
                        .IsUnique();

                    b.HasIndex("SupplierId");

                    b.ToTable("ReceiptRejects");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.ReceiptRejectSubject", b =>
                {
                    b.Property<long>("ReceiptRejectSubjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("ParentSubjectId")
                        .HasColumnType("bigint");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("ReceiptQuantity")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<long?>("ReceiptRejectId")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("ReceiptRejectSubjectId");

                    b.HasIndex("ParentSubjectId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ReceiptRejectId");

                    b.ToTable("ReceiptRejectSubjects");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.ReceiptSubject", b =>
                {
                    b.Property<long>("ReceiptSubjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("PackQuantity")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<long?>("ParentSubjectId")
                        .HasColumnType("bigint");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("PurchaseRejectRemainedQuantity")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("QCAcceptQuantity")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<long?>("ReceiptId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("ReceiptQuantity")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<decimal>("ShortageQuantity")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("ReceiptSubjectId");

                    b.HasIndex("ParentSubjectId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ReceiptId");

                    b.ToTable("ReceiptSubjects");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.RevisionActivity", b =>
                {
                    b.Property<long>("RevisionActivityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActivityOwnerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<double>("Duration")
                        .HasColumnType("float");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("RevisionActivityStatus")
                        .HasColumnType("int");

                    b.Property<long>("RevisionId")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("RevisionActivityId");

                    b.HasIndex("ActivityOwnerId");

                    b.HasIndex("RevisionId");

                    b.ToTable("RevisionActivities");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.RevisionActivityTimesheet", b =>
                {
                    b.Property<long>("ActivityTimesheetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdderUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateIssue")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifierUserId")
                        .HasColumnType("int");

                    b.Property<long>("RevisionActivityId")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ActivityTimesheetId");

                    b.HasIndex("AdderUserId");

                    b.HasIndex("ModifierUserId");

                    b.HasIndex("RevisionActivityId");

                    b.ToTable("RevisionActivityTimesheets");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.RevisionAttachment", b =>
                {
                    b.Property<long>("RevisionAttachmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdderUserId")
                        .HasColumnType("int");

                    b.Property<long?>("ConfirmationWorkFlowId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("DocumentRevisionId")
                        .HasColumnType("bigint");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("FileSrc")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifierUserId")
                        .HasColumnType("int");

                    b.Property<long?>("RevisionActivityTimesheetId")
                        .HasColumnType("bigint");

                    b.Property<int>("RevisionAttachmentType")
                        .HasColumnType("int");

                    b.Property<long?>("RevisionCommentId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TransmittalId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("RevisionAttachmentId");

                    b.HasIndex("AdderUserId");

                    b.HasIndex("ConfirmationWorkFlowId");

                    b.HasIndex("DocumentRevisionId");

                    b.HasIndex("ModifierUserId");

                    b.HasIndex("RevisionActivityTimesheetId");

                    b.HasIndex("RevisionCommentId");

                    b.HasIndex("TransmittalId");

                    b.ToTable("RevisionAttachments");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.RevisionComment", b =>
                {
                    b.Property<long>("RevisionCommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdderUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("DocumentRevisionId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ModifierUserId")
                        .HasColumnType("int");

                    b.Property<long?>("ParentCommentId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("RevisionCommentId");

                    b.HasIndex("AdderUserId");

                    b.HasIndex("DocumentRevisionId");

                    b.HasIndex("ModifierUserId");

                    b.HasIndex("ParentCommentId");

                    b.ToTable("RevisionComments");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.RevisionCommentUser", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<long>("RevisionCommentId")
                        .HasColumnType("bigint");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "RevisionCommentId");

                    b.HasIndex("RevisionCommentId");

                    b.ToTable("RevisionCommentUsers");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<bool>("IsGlobalGroup")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSendMailNotification")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSendNotification")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(150);

                    b.Property<string>("SCMEvents")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubModuleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.SCMAuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("BaseContractCode")
                        .HasColumnType("varchar(60)");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<int?>("DocumentGroupId")
                        .HasColumnType("int");

                    b.Property<string>("FormCode")
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<string>("KeyValue")
                        .HasColumnType("nvarchar(44)")
                        .HasMaxLength(44);

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(800)")
                        .HasMaxLength(800);

                    b.Property<int>("NotifEvent")
                        .HasColumnType("int");

                    b.Property<int?>("PerformerUserId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductGroupId")
                        .HasColumnType("int");

                    b.Property<string>("Quantity")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("RootKeyValue")
                        .HasColumnType("nvarchar(44)")
                        .HasMaxLength(44);

                    b.Property<string>("RootKeyValue2")
                        .HasColumnType("nvarchar(44)")
                        .HasMaxLength(44);

                    b.Property<string>("Temp")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("BaseContractCode");

                    b.HasIndex("DocumentGroupId");

                    b.HasIndex("PerformerUserId");

                    b.HasIndex("ProductGroupId");

                    b.ToTable("SCMAuditLogs");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdderUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(400)")
                        .HasMaxLength(400);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifierUserId")
                        .HasColumnType("int");

                    b.Property<string>("ServiceCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AdderUserId");

                    b.HasIndex("ModifierUserId");

                    b.HasIndex("ServiceCode")
                        .IsUnique()
                        .HasFilter("[ServiceCode] IS NOT NULL");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.StatusOperation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdderUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifierUserId")
                        .HasColumnType("int");

                    b.Property<Guid>("OperationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("OperationStatus")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AdderUserId");

                    b.HasIndex("ModifierUserId");

                    b.HasIndex("OperationId");

                    b.ToTable("OperationStatuses");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdderUserId")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(300)")
                        .HasMaxLength(300);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EconomicCode")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(300)")
                        .HasMaxLength(300);

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(300)")
                        .HasMaxLength(300);

                    b.Property<int?>("ModifierUserId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("NationalId")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("SupplierCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(60)")
                        .HasMaxLength(60);

                    b.Property<string>("TellPhone")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(300)")
                        .HasMaxLength(300);

                    b.HasKey("Id");

                    b.HasIndex("AdderUserId");

                    b.HasIndex("ModifierUserId");

                    b.HasIndex("SupplierCode")
                        .IsUnique();

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.SupplierProductGroup", b =>
                {
                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<int>("ProductGroupId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("SupplierId", "ProductGroupId");

                    b.HasIndex("ProductGroupId");

                    b.ToTable("SupplierProductGroups");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.TeamWork", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContractCode")
                        .HasColumnType("varchar(60)");

                    b.Property<DateTime>("DateCreat")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(800)")
                        .HasMaxLength(800);

                    b.HasKey("Id");

                    b.HasIndex("ContractCode")
                        .IsUnique()
                        .HasFilter("[ContractCode] IS NOT NULL");

                    b.ToTable("TeamWorks");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.TeamWorkUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("TeamWorkId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TeamWorkId");

                    b.HasIndex("UserId");

                    b.ToTable("TeamWorkUsers");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.TeamWorkUserDocumentGroup", b =>
                {
                    b.Property<int>("TeamWorkUserId")
                        .HasColumnType("int");

                    b.Property<int>("DocumentGroupId")
                        .HasColumnType("int");

                    b.Property<string>("ContractCode")
                        .HasColumnType("varchar(60)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("TeamWorkUserId", "DocumentGroupId");

                    b.HasIndex("DocumentGroupId");

                    b.ToTable("TeamWorkUserDocumentGroups");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.TeamWorkUserProductGroup", b =>
                {
                    b.Property<int>("TeamWorkUserId")
                        .HasColumnType("int");

                    b.Property<int>("ProductGroupId")
                        .HasColumnType("int");

                    b.Property<string>("ContractCode")
                        .HasColumnType("varchar(60)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("TeamWorkUserId", "ProductGroupId");

                    b.HasIndex("ProductGroupId");

                    b.ToTable("TeamWorkUserProductGroups");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.TeamWorkUserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContractCode")
                        .HasColumnType("varchar(60)");

                    b.Property<bool>("IsGlobalGroup")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSendMailNotification")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSendNotification")
                        .HasColumnType("bit");

                    b.Property<string>("RoleDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("RoleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SCMEvents")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubModuleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<int>("TeamWorkId")
                        .HasColumnType("int");

                    b.Property<int>("TeamWorkUserId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("TeamWorkUserId");

                    b.ToTable("TeamWorkUserRoles");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.TeamWorkUserWarehouse", b =>
                {
                    b.Property<int>("TeamWorkUserId")
                        .HasColumnType("int");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("TeamWorkUserId", "WarehouseId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("TeamWorkUserWarehouses");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.Transmittal", b =>
                {
                    b.Property<long>("TransmittalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdderUserId")
                        .HasColumnType("int");

                    b.Property<int?>("ConsultantId")
                        .HasColumnType("int");

                    b.Property<string>("ContractCode")
                        .HasColumnType("varchar(60)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(800)")
                        .HasMaxLength(800);

                    b.Property<int>("DocumentGroupId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(300)")
                        .HasMaxLength(300);

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int?>("ModifierUserId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int");

                    b.Property<string>("TransmittalNumber")
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<int>("TransmittalType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("TransmittalId");

                    b.HasIndex("AdderUserId");

                    b.HasIndex("ConsultantId");

                    b.HasIndex("ContractCode");

                    b.HasIndex("DocumentGroupId");

                    b.HasIndex("ModifierUserId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("TransmittalNumber")
                        .IsUnique()
                        .HasFilter("[TransmittalNumber] IS NOT NULL");

                    b.ToTable("Transmittals");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.TransmittalRevision", b =>
                {
                    b.Property<long>("DocumentRevisionId")
                        .HasColumnType("bigint");

                    b.Property<long>("TransmittalId")
                        .HasColumnType("bigint");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("POI")
                        .HasColumnType("int");

                    b.HasKey("DocumentRevisionId", "TransmittalId");

                    b.HasIndex("TransmittalId");

                    b.ToTable("TransmittalRevisions");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DateExpireRefreshToken")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(300)")
                        .HasMaxLength(300);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("varchar(64)")
                        .HasMaxLength(64);

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Telephone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("UserType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasFilter("[UserName] IS NOT NULL");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.UserInvisibleTeamWork", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("TeamWorkId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserInvisibleTeamWorks");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.UserNotification", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<Guid>("NotificationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DateSeen")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsSeen")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUserSetTaskDone")
                        .HasColumnType("bit");

                    b.Property<long>("UserNotificationsId")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "NotificationId");

                    b.HasIndex("NotificationId");

                    b.ToTable("UserNotifications");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.UserSeenSCMAuditLog", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<Guid>("SCMAuditLogId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DateSeen")
                        .HasColumnType("datetime2");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "SCMAuditLogId");

                    b.HasIndex("SCMAuditLogId");

                    b.ToTable("UserSeenSCMAuditLogs");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.Warehouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdderUserId")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(300)")
                        .HasMaxLength(300);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifierUserId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("WarehouseCode")
                        .HasColumnType("nvarchar(60)")
                        .HasMaxLength(60);

                    b.HasKey("Id");

                    b.HasIndex("AdderUserId");

                    b.HasIndex("ModifierUserId");

                    b.HasIndex("WarehouseCode")
                        .IsUnique()
                        .HasFilter("[WarehouseCode] IS NOT NULL");

                    b.ToTable("Warehouses");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.WarehouseProduct", b =>
                {
                    b.Property<int>("WarehouseProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("AcceptQuantity")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("AdderUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Inventory")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("ModifierUserId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("ReceiptQuantity")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("WarehouseProductId");

                    b.HasIndex("AdderUserId");

                    b.HasIndex("ModifierUserId");

                    b.HasIndex("ProductId");

                    b.ToTable("WarehouseProducts");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.WarehouseProductStockLogs", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateChange")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Input")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("Output")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("RealStock")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<long?>("ReceiptId")
                        .HasColumnType("bigint");

                    b.Property<int>("WarehouseStockChangeActionType")
                        .HasColumnType("int");

                    b.Property<long?>("WarehouseTransferenceId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ReceiptId");

                    b.HasIndex("WarehouseTransferenceId");

                    b.ToTable("WarehouseProductStockLogs");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.Address", b =>
                {
                    b.HasOne("Raybod.SCM.Domain.Model.User", "AdderUser")
                        .WithMany()
                        .HasForeignKey("AdderUserId");

                    b.HasOne("Raybod.SCM.Domain.Model.Company", "Company")
                        .WithMany("Addresses")
                        .HasForeignKey("CompanyId");

                    b.HasOne("Raybod.SCM.Domain.Model.User", "ModifierUser")
                        .WithMany()
                        .HasForeignKey("ModifierUserId");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.Area", b =>
                {
                    b.HasOne("Raybod.SCM.Domain.Model.User", "AdderUser")
                        .WithMany()
                        .HasForeignKey("AdderUserId");

                    b.HasOne("Raybod.SCM.Domain.Model.Contract", "Contract")
                        .WithMany()
                        .HasForeignKey("ContractCode");

                    b.HasOne("Raybod.SCM.Domain.Model.User", "ModifierUser")
                        .WithMany()
                        .HasForeignKey("ModifierUserId");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.BomProduct", b =>
                {
                    b.HasOne("Raybod.SCM.Domain.Model.User", "AdderUser")
                        .WithMany()
                        .HasForeignKey("AdderUserId");

                    b.HasOne("Raybod.SCM.Domain.Model.Area", "Area")
                        .WithMany("BomProducts")
                        .HasForeignKey("AreaId");

                    b.HasOne("Raybod.SCM.Domain.Model.User", "ModifierUser")
                        .WithMany()
                        .HasForeignKey("ModifierUserId");

                    b.HasOne("Raybod.SCM.Domain.Model.BomProduct", "ParentBom")
                        .WithMany("ChildBom")
                        .HasForeignKey("ParentBomId");

                    b.HasOne("Raybod.SCM.Domain.Model.Product", "Product")
                        .WithMany("BomProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.City", b =>
                {
                    b.HasOne("Raybod.SCM.Domain.Model.Province", "Province")
                        .WithMany("Cities")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.CommunicationAttachment", b =>
                {
                    b.HasOne("Raybod.SCM.Domain.Model.User", "AdderUser")
                        .WithMany()
                        .HasForeignKey("AdderUserId");

                    b.HasOne("Raybod.SCM.Domain.Model.CommunicationQuestion", "CommunicationQuestion")
                        .WithMany("Attachments")
                        .HasForeignKey("CommunicationQuestionId");

                    b.HasOne("Raybod.SCM.Domain.Model.CommunicationReply", "CommunicationReply")
                        .WithMany("Attachments")
                        .HasForeignKey("CommunicationReplyId");

                    b.HasOne("Raybod.SCM.Domain.Model.CommunicationTeamComment", "CommunicationTeamComment")
                        .WithMany("Attachments")
                        .HasForeignKey("CommunicationTeamCommentId");

                    b.HasOne("Raybod.SCM.Domain.Model.DocumentCommunication", "DocumentCommunication")
                        .WithMany("Attachments")
                        .HasForeignKey("DocumentCommunicationId");

                    b.HasOne("Raybod.SCM.Domain.Model.DocumentTQNCR", "DocumentTQNCR")
                        .WithMany("Attachments")
                        .HasForeignKey("DocumentTQNCRId");

                    b.HasOne("Raybod.SCM.Domain.Model.User", "ModifierUser")
                        .WithMany()
                        .HasForeignKey("ModifierUserId");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.CommunicationQuestion", b =>
                {
                    b.HasOne("Raybod.SCM.Domain.Model.User", "AdderUser")
                        .WithMany()
                        .HasForeignKey("AdderUserId");

                    b.HasOne("Raybod.SCM.Domain.Model.DocumentCommunication", "DocumentCommunication")
                        .WithMany("CommunicationQuestions")
                        .HasForeignKey("DocumentCommunicationId");

                    b.HasOne("Raybod.SCM.Domain.Model.DocumentTQNCR", "DocumentTQNCR")
                        .WithMany("CommunicationQuestions")
                        .HasForeignKey("DocumentTQNCRId");

                    b.HasOne("Raybod.SCM.Domain.Model.User", "ModifierUser")
                        .WithMany()
                        .HasForeignKey("ModifierUserId");

                    b.HasOne("Raybod.SCM.Domain.Model.CommunicationQuestion", "ParentQuestion")
                        .WithMany("ChildQuestions")
                        .HasForeignKey("ParentQuestionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.CommunicationReply", b =>
                {
                    b.HasOne("Raybod.SCM.Domain.Model.User", "AdderUser")
                        .WithMany()
                        .HasForeignKey("AdderUserId");

                    b.HasOne("Raybod.SCM.Domain.Model.CommunicationQuestion", "CommunicationQuestion")
                        .WithOne("CommunicationReply")
                        .HasForeignKey("Raybod.SCM.Domain.Model.CommunicationReply", "CommunicationQuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Raybod.SCM.Domain.Model.User", "ModifierUser")
                        .WithMany()
                        .HasForeignKey("ModifierUserId");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.CommunicationTeamComment", b =>
                {
                    b.HasOne("Raybod.SCM.Domain.Model.User", "AdderUser")
                        .WithMany()
                        .HasForeignKey("AdderUserId");

                    b.HasOne("Raybod.SCM.Domain.Model.DocumentCommunication", "Communication")
                        .WithMany("Comments")
                        .HasForeignKey("DocumentCommunicationId");

                    b.HasOne("Raybod.SCM.Domain.Model.DocumentTQNCR", "DocumentTQNCR")
                        .WithMany("Comments")
                        .HasForeignKey("DocumentTQNCRId");

                    b.HasOne("Raybod.SCM.Domain.Model.User", "ModifierUser")
                        .WithMany()
                        .HasForeignKey("ModifierUserId");

                    b.HasOne("Raybod.SCM.Domain.Model.CommunicationTeamComment", "ParentComment")
                        .WithMany("ReplayComments")
                        .HasForeignKey("ParentCommentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.CommunicationTeamCommentUser", b =>
                {
                    b.HasOne("Raybod.SCM.Domain.Model.CommunicationTeamComment", "CommunicationTeamComment")
                        .WithMany("CommentUsers")
                        .HasForeignKey("CommunicationTeamCommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Raybod.SCM.Domain.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.CompanyUser", b =>
                {
                    b.HasOne("Raybod.SCM.Domain.Model.User", "AdderUser")
                        .WithMany()
                        .HasForeignKey("AdderUserId");

                    b.HasOne("Raybod.SCM.Domain.Model.Consultant", "Consultant")
                        .WithMany("ConsultantUsers")
                        .HasForeignKey("ConsultantId");

                    b.HasOne("Raybod.SCM.Domain.Model.Customer", "Customer")
                        .WithMany("CustomerUsers")
                        .HasForeignKey("CustomerId");

                    b.HasOne("Raybod.SCM.Domain.Model.User", "ModifierUser")
                        .WithMany()
                        .HasForeignKey("ModifierUserId");

                    b.HasOne("Raybod.SCM.Domain.Model.Supplier", "Supplier")
                        .WithMany("SupplierUsers")
                        .HasForeignKey("SupplierId");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.ConfirmationWorkFlow", b =>
                {
                    b.HasOne("Raybod.SCM.Domain.Model.User", "AdderUser")
                        .WithMany()
                        .HasForeignKey("AdderUserId");

                    b.HasOne("Raybod.SCM.Domain.Model.DocumentRevision", "DocumentRevision")
                        .WithMany("ConfirmationWorkFlows")
                        .HasForeignKey("DocumentRevisionId");

                    b.HasOne("Raybod.SCM.Domain.Model.User", "ModifierUser")
                        .WithMany()
                        .HasForeignKey("ModifierUserId");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.ConfirmationWorkFlowTemplate", b =>
                {
                    b.HasOne("Raybod.SCM.Domain.Model.User", "AdderUser")
                        .WithMany()
                        .HasForeignKey("AdderUserId");

                    b.HasOne("Raybod.SCM.Domain.Model.DocumentGroup", "DocumentGroup")
                        .WithMany()
                        .HasForeignKey("DocumentGroupId");

                    b.HasOne("Raybod.SCM.Domain.Model.User", "ModifierUser")
                        .WithMany()
                        .HasForeignKey("ModifierUserId");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.ConfirmationWorkFlowTemplateUser", b =>
                {
                    b.HasOne("Raybod.SCM.Domain.Model.ConfirmationWorkFlowTemplate", "ConfirmationWorkFlowTemplate")
                        .WithMany("ConfirmationWorkFlowTemplateUsers")
                        .HasForeignKey("ConfirmationWorkFlowTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Raybod.SCM.Domain.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.ConfirmationWorkFlowUser", b =>
                {
                    b.HasOne("Raybod.SCM.Domain.Model.ConfirmationWorkFlow", "ConfirmationWorkFlow")
                        .WithMany("ConfirmationWorkFlowUsers")
                        .HasForeignKey("ConfirmationWorkFlowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Raybod.SCM.Domain.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.Consultant", b =>
                {
                    b.HasOne("Raybod.SCM.Domain.Model.User", "AdderUser")
                        .WithMany()
                        .HasForeignKey("AdderUserId");

                    b.HasOne("Raybod.SCM.Domain.Model.User", "ModifierUser")
                        .WithMany()
                        .HasForeignKey("ModifierUserId");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.Contract", b =>
                {
                    b.HasOne("Raybod.SCM.Domain.Model.User", "AdderUser")
                        .WithMany()
                        .HasForeignKey("AdderUserId");

                    b.HasOne("Raybod.SCM.Domain.Model.Consultant", "Consultant")
                        .WithMany("ConsultantContracts")
                        .HasForeignKey("ConsultantId");

                    b.HasOne("Raybod.SCM.Domain.Model.Customer", "Customer")
                        .WithMany("CustomerContracts")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Raybod.SCM.Domain.Model.User", "ModifierUser")
                        .WithMany()
                        .HasForeignKey("ModifierUserId");

                    b.HasOne("Raybod.SCM.Domain.Model.Contract", "ParnetContract")
                        .WithMany("AddendumContracts")
                        .HasForeignKey("ParnetContractCode")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.ContractAddress", b =>
                {
                    b.HasOne("Raybod.SCM.Domain.Model.Address", "Address")
                        .WithMany("ContractAddresses")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Raybod.SCM.Domain.Model.Contract", "Contract")
                        .WithMany("ContractAddresses")
                        .HasForeignKey("ContractCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.ContractAttachment", b =>
                {
                    b.HasOne("Raybod.SCM.Domain.Model.User", "AdderUser")
                        .WithMany()
                        .HasForeignKey("AdderUserId");

                    b.HasOne("Raybod.SCM.Domain.Model.Contract", "Contract")
                        .WithMany("Attachments")
                        .HasForeignKey("ContractCode")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Raybod.SCM.Domain.Model.User", "ModifierUser")
                        .WithMany()
                        .HasForeignKey("ModifierUserId");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.ContractDocumentGroupList", b =>
                {
                    b.HasOne("Raybod.SCM.Domain.Model.User", "AdderUser")
                        .WithMany()
                        .HasForeignKey("AdderUserId");

                    b.HasOne("Raybod.SCM.Domain.Model.Contract", "Contract")
                        .WithMany("ContractDocumentGroupLists")
                        .HasForeignKey("ContractCode");

                    b.HasOne("Raybod.SCM.Domain.Model.DocumentGroup", "DocumentGroup")
                        .WithMany("ContractDocumentGroupLists")
                        .HasForeignKey("DocumentGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Raybod.SCM.Domain.Model.User", "ModifierUser")
                        .WithMany()
                        .HasForeignKey("ModifierUserId");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.ContractFormConfig", b =>
                {
                    b.HasOne("Raybod.SCM.Domain.Model.Contract", "Contract")
                        .WithMany("ContractFormConfigs")
                        .HasForeignKey("ContractCode");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.ContractSubject", b =>
                {
                    b.HasOne("Raybod.SCM.Domain.Model.User", "AdderUser")
                        .WithMany()
                        .HasForeignKey("AdderUserId");

                    b.HasOne("Raybod.SCM.Domain.Model.Contract", "Contract")
                        .WithMany("ContractSubjects")
                        .HasForeignKey("ContractCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Raybod.SCM.Domain.Model.User", "ModifierUser")
                        .WithMany()
                        .HasForeignKey("ModifierUserId");

                    b.HasOne("Raybod.SCM.Domain.Model.Product", "Product")
                        .WithMany("ContractSubjects")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.Customer", b =>
                {
                    b.HasOne("Raybod.SCM.Domain.Model.User", "AdderUser")
                        .WithMany()
                        .HasForeignKey("AdderUserId");

                    b.HasOne("Raybod.SCM.Domain.Model.User", "ModifierUser")
                        .WithMany()
                        .HasForeignKey("ModifierUserId");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.Document", b =>
                {
                    b.HasOne("Raybod.SCM.Domain.Model.User", "AdderUser")
                        .WithMany()
                        .HasForeignKey("AdderUserId");

                    b.HasOne("Raybod.SCM.Domain.Model.Area", "Area")
                        .WithMany("Documents")
                        .HasForeignKey("AreaId");

                    b.HasOne("Raybod.SCM.Domain.Model.ConfirmationWorkFlowTemplate", "ConfirmationWorkFlowTemplate")
                        .WithMany("Documents")
                        .HasForeignKey("ConfirmationWorkFlowTemplateId");

                    b.HasOne("Raybod.SCM.Domain.Model.Contract", "Contract")
                        .WithMany("Documents")
                        .HasForeignKey("ContractCode");

                    b.HasOne("Raybod.SCM.Domain.Model.DocumentGroup", "DocumentGroup")
                        .WithMany("Documents")
                        .HasForeignKey("DocumentGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Raybod.SCM.Domain.Model.User", "ModifierUser")
                        .WithMany()
                        .HasForeignKey("ModifierUserId");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.DocumentCommunication", b =>
                {
                    b.HasOne("Raybod.SCM.Domain.Model.User", "AdderUser")
                        .WithMany()
                        .HasForeignKey("AdderUserId");

                    b.HasOne("Raybod.SCM.Domain.Model.Consultant", "Consultant")
                        .WithMany()
                        .HasForeignKey("ConsultantId");

                    b.HasOne("Raybod.SCM.Domain.Model.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("Raybod.SCM.Domain.Model.DocumentRevision", "DocumentRevision")
                        .WithMany("DocumentCommunications")
                        .HasForeignKey("DocumentRevisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Raybod.SCM.Domain.Model.User", "ModifierUser")
                        .WithMany()
                        .HasForeignKey("ModifierUserId");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.DocumentGroup", b =>
                {
                    b.HasOne("Raybod.SCM.Domain.Model.User", "AdderUser")
                        .WithMany()
                        .HasForeignKey("AdderUserId");

                    b.HasOne("Raybod.SCM.Domain.Model.User", "ModifierUser")
                        .WithMany()
                        .HasForeignKey("ModifierUserId");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.DocumentProduct", b =>
                {
                    b.HasOne("Raybod.SCM.Domain.Model.Document", "Document")
                        .WithMany("DocumentProducts")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Raybod.SCM.Domain.Model.Product", "Product")
                        .WithMany("DocumentProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.DocumentRevision", b =>
                {
                    b.HasOne("Raybod.SCM.Domain.Model.User", "AdderUser")
                        .WithMany()
                        .HasForeignKey("AdderUserId");

                    b.HasOne("Raybod.SCM.Domain.Model.Document", "Document")
                        .WithMany("DocumentRevisions")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Raybod.SCM.Domain.Model.User", "ModifierUser")
                        .WithMany()
                        .HasForeignKey("ModifierUserId");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.DocumentTQNCR", b =>
                {
                    b.HasOne("Raybod.SCM.Domain.Model.User", "AdderUser")
                        .WithMany()
                        .HasForeignKey("AdderUserId");

                    b.HasOne("Raybod.SCM.Domain.Model.Consultant", "Consultant")
                        .WithMany()
                        .HasForeignKey("ConsultantId");

                    b.HasOne("Raybod.SCM.Domain.Model.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("Raybod.SCM.Domain.Model.DocumentRevision", "DocumentRevision")
                        .WithMany("DocumentTQNCRs")
                        .HasForeignKey("DocumentRevisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Raybod.SCM.Domain.Model.User", "ModifierUser")
                        .WithMany()
                        .HasForeignKey("ModifierUserId");

                    b.HasOne("Raybod.SCM.Domain.Model.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.FinancialAccount", b =>
                {
                    b.HasOne("Raybod.SCM.Domain.Model.Invoice", "Invoice")
                        .WithOne("FinancialAccount")
                        .HasForeignKey("Raybod.SCM.Domain.Model.FinancialAccount", "InvoiceId");

                    b.HasOne("Raybod.SCM.Domain.Model.PO", "PO")
                        .WithMany("FinancialAccounts")
                        .HasForeignKey("POId");

                    b.HasOne("Raybod.SCM.Domain.Model.Payment", "Payment")
                        .WithOne("FinancialAccount")
                        .HasForeignKey("Raybod.SCM.Domain.Model.FinancialAccount", "PaymentId");

                    b.HasOne("Raybod.SCM.Domain.Model.Supplier", "Supplier")
                        .WithMany("FinancialAccounts")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.Invoice", b =>
                {
                    b.HasOne("Raybod.SCM.Domain.Model.User", "AdderUser")
                        .WithMany()
                        .HasForeignKey("AdderUserId");

                    b.HasOne("Raybod.SCM.Domain.Model.User", "ModifierUser")
                        .WithMany()
                        .HasForeignKey("ModifierUserId");

                    b.HasOne("Raybod.SCM.Domain.Model.PO", "PO")
                        .WithMany()
                        .HasForeignKey("POId");

                    b.HasOne("Raybod.SCM.Domain.Model.Supplier", "Supplier")
                        .WithMany("Invoices")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.InvoiceProduct", b =>
                {
                    b.HasOne("Raybod.SCM.Domain.Model.Invoice", "Invoice")
                        .WithMany("InvoiceProducts")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Raybod.SCM.Domain.Model.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.LogUserReceiver", b =>
                {
                    b.HasOne("Raybod.SCM.Domain.Model.SCMAuditLog", "SCMAuditLog")
                        .WithMany("LogUserReceivers")
                        .HasForeignKey("SCMAuditLogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Raybod.SCM.Domain.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.Logistic", b =>
                {
                    b.HasOne("Raybod.SCM.Domain.Model.User", "AdderUser")
                        .WithMany()
                        .HasForeignKey("AdderUserId");

                    b.HasOne("Raybod.SCM.Domain.Model.User", "ModifierUser")
                        .WithMany()
                        .HasForeignKey("ModifierUserId");

                    b.HasOne("Raybod.SCM.Domain.Model.Pack", "Pack")
                        .WithMany("Logistics")
                        .HasForeignKey("PackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.MasterMR", b =>
                {
                    b.HasOne("Raybod.SCM.Domain.Model.Product", "BomProduct")
                        .WithMany("MasterBomProducts")
                        .HasForeignKey("BomProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Raybod.SCM.Domain.Model.Contract", "Contract")
                        .WithMany("MasterMRs")
                        .HasForeignKey("ContractCode");

                    b.HasOne("Raybod.SCM.Domain.Model.Product", "Product")
                        .WithMany("MasterMRs")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.Mrp", b =>
                {
                    b.HasOne("Raybod.SCM.Domain.Model.User", "AdderUser")
                        .WithMany()
                        .HasForeignKey("AdderUserId");

                    b.HasOne("Raybod.SCM.Domain.Model.Contract", "Contract")
                        .WithMany("Mrps")
                        .HasForeignKey("ContractCode")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Raybod.SCM.Domain.Model.User", "ModifierUser")
                        .WithMany()
                        .HasForeignKey("ModifierUserId");

                    b.HasOne("Raybod.SCM.Domain.Model.ProductGroup", "ProductGroup")
                        .WithMany()
                        .HasForeignKey("ProductGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.MrpItem", b =>
                {
                    b.HasOne("Raybod.SCM.Domain.Model.User", "AdderUser")
                        .WithMany()
                        .HasForeignKey("AdderUserId");

                    b.HasOne("Raybod.SCM.Domain.Model.MasterMR", "MasterMR")
                        .WithMany("MrpItems")
                        .HasForeignKey("MasterMRId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Raybod.SCM.Domain.Model.User", "ModifierUser")
                        .WithMany()
                        .HasForeignKey("ModifierUserId");

                    b.HasOne("Raybod.SCM.Domain.Model.Mrp", "Mrp")
                        .WithMany("MrpItems")
                        .HasForeignKey("MrpId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Raybod.SCM.Domain.Model.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.Notification", b =>
                {
                    b.HasOne("Raybod.SCM.Domain.Model.User", "PerformerUser")
                        .WithMany("PerformerNotifications")
                        .HasForeignKey("PerformerUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Raybod.SCM.Domain.Model.User", null)
                        .WithMany("Notifications")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.Operation", b =>
                {
                    b.HasOne("Raybod.SCM.Domain.Model.User", "AdderUser")
                        .WithMany()
                        .HasForeignKey("AdderUserId");

                    b.HasOne("Raybod.SCM.Domain.Model.Area", "Area")
                        .WithMany()
                        .HasForeignKey("AreaId");

                    b.HasOne("Raybod.SCM.Domain.Model.Contract", "Contract")
                        .WithMany()
                        .HasForeignKey("ContractCode");

                    b.HasOne("Raybod.SCM.Domain.Model.User", "ModifierUser")
                        .WithMany()
                        .HasForeignKey("ModifierUserId");

                    b.HasOne("Raybod.SCM.Domain.Model.OperationGroup", "OperationGroup")
                        .WithMany("Operations")
                        .HasForeignKey("OperationGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.OperationActivity", b =>
                {
                    b.HasOne("Raybod.SCM.Domain.Model.User", "ActivityOwner")
                        .WithMany()
                        .HasForeignKey("ActivityOwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Raybod.SCM.Domain.Model.User", "AdderUser")
                        .WithMany()
                        .HasForeignKey("AdderUserId");

                    b.HasOne("Raybod.SCM.Domain.Model.User", "ModifierUser")
                        .WithMany()
                        .HasForeignKey("ModifierUserId");

                    b.HasOne("Raybod.SCM.Domain.Model.Operation", "Operation")
                        .WithMany()
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.OperationActivityTimesheet", b =>
                {
                    b.HasOne("Raybod.SCM.Domain.Model.User", "AdderUser")
                        .WithMany()
                        .HasForeignKey("AdderUserId");

                    b.HasOne("Raybod.SCM.Domain.Model.User", "ModifierUser")
                        .WithMany()
                        .HasForeignKey("ModifierUserId");

                    b.HasOne("Raybod.SCM.Domain.Model.OperationActivity", "OperationActivity")
                        .WithMany("OperationActivityTimesheets")
                        .HasForeignKey("OperationActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.OperationAttachment", b =>
                {
                    b.HasOne("Raybod.SCM.Domain.Model.User", "AdderUser")
                        .WithMany()
                        .HasForeignKey("AdderUserId");

                    b.HasOne("Raybod.SCM.Domain.Model.User", "ModifierUser")
                        .WithMany()
                        .HasForeignKey("ModifierUserId");

                    b.HasOne("Raybod.SCM.Domain.Model.OperationComment", "OperationComment")
                        .WithMany("Attachments")
                        .HasForeignKey("OperationCommentId");

                    b.HasOne("Raybod.SCM.Domain.Model.Operation", "Operation")
                        .WithMany("Attachments")
                        .HasForeignKey("OperationId");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.OperationComment", b =>
                {
                    b.HasOne("Raybod.SCM.Domain.Model.User", "AdderUser")
                        .WithMany()
                        .HasForeignKey("AdderUserId");

                    b.HasOne("Raybod.SCM.Domain.Model.User", "ModifierUser")
                        .WithMany()
                        .HasForeignKey("ModifierUserId");

                    b.HasOne("Raybod.SCM.Domain.Model.Operation", "Operation")
                        .WithMany()
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Raybod.SCM.Domain.Model.OperationComment", "ParentComment")
                        .WithMany("ReplayComments")
                        .HasForeignKey("ParentCommentId");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.OperationCommentUser", b =>
                {
                    b.HasOne("Raybod.SCM.Domain.Model.OperationComment", "OperationComment")
                        .WithMany("OperationCommentUsers")
                        .HasForeignKey("OperationCommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Raybod.SCM.Domain.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.OperationGroup", b =>
                {
                    b.HasOne("Raybod.SCM.Domain.Model.User", "AdderUser")
                        .WithMany()
                        .HasForeignKey("AdderUserId");

                    b.HasOne("Raybod.SCM.Domain.Model.User", "ModifierUser")
                        .WithMany()
                        .HasForeignKey("ModifierUserId");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.OperationProgress", b =>
                {
                    b.HasOne("Raybod.SCM.Domain.Model.User", "AdderUser")
                        .WithMany()
                        .HasForeignKey("AdderUserId");

                    b.HasOne("Raybod.SCM.Domain.Model.User", "ModifierUser")
                        .WithMany()
                        .HasForeignKey("ModifierUserId");

                    b.HasOne("Raybod.SCM.Domain.Model.Operation", "Operation")
                        .WithMany("OperationProgresses")
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.PAttachment", b =>
                {
                    b.HasOne("Raybod.SCM.Domain.Model.User", "AdderUser")
                        .WithMany()
                        .HasForeignKey("AdderUserId");

                    b.HasOne("Raybod.SCM.Domain.Model.Logistic", "Logistic")
                        .WithMany("Attachments")
                        .HasForeignKey("LogisticId");

                    b.HasOne("Raybod.SCM.Domain.Model.User", "ModifierUser")
                        .WithMany()
                        .HasForeignKey("ModifierUserId");

                    b.HasOne("Raybod.SCM.Domain.Model.POComment", "POComment")
                        .WithMany("Attachments")
                        .HasForeignKey("POCommentId");

                    b.HasOne("Raybod.SCM.Domain.Model.PO", "PO")
                        .WithMany("POAttachments")
                        .HasForeignKey("POId");

                    b.HasOne("Raybod.SCM.Domain.Model.PRContract", "PRContract")
                        .WithMany("PRContractAttachments")
                        .HasForeignKey("PRContractId");

                    b.HasOne("Raybod.SCM.Domain.Model.Pack", "Pack")
                        .WithMany("PackAttachments")
                        .HasForeignKey("PackId");

                    b.HasOne("Raybod.SCM.Domain.Model.PurchaseRequest", "PurchaseRequest")
                        .WithMany("PRAttachments")
                        .HasForeignKey("PurchaseRequestId");

                    b.HasOne("Raybod.SCM.Domain.Model.QualityControl", "QualityControl")
                        .WithMany("QCAttachments")
                        .HasForeignKey("QualityControlId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Raybod.SCM.Domain.Model.Receipt", "Receipt")
                        .WithMany("ReceiptAttachments")
                        .HasForeignKey("ReceiptId");

                    b.HasOne("Raybod.SCM.Domain.Model.ReceiptReject", "ReceiptReject")
                        .WithMany("ReceiptRejectAttachments")
                        .HasForeignKey("ReceiptRejectId");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.PDFTemplate", b =>
                {
                    b.HasOne("Raybod.SCM.Domain.Model.Contract", "Contract")
                        .WithMany()
                        .HasForeignKey("ContractCode");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.PO", b =>
                {
                    b.HasOne("Raybod.SCM.Domain.Model.User", "AdderUser")
                        .WithMany()
                        .HasForeignKey("AdderUserId");

                    b.HasOne("Raybod.SCM.Domain.Model.Contract", "Contract")
                        .WithMany("POs")
                        .HasForeignKey("BaseContractCode");

                    b.HasOne("Raybod.SCM.Domain.Model.User", "ModifierUser")
                        .WithMany()
                        .HasForeignKey("ModifierUserId");

                    b.HasOne("Raybod.SCM.Domain.Model.PRContract", "PRContract")
                        .WithMany("POs")
                        .HasForeignKey("PRContractId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Raybod.SCM.Domain.Model.ProductGroup", "ProductGroup")
                        .WithMany()
                        .HasForeignKey("ProductGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Raybod.SCM.Domain.Model.Service", null)
                        .WithMany("POs")
                        .HasForeignKey("ServiceId");

                    b.HasOne("Raybod.SCM.Domain.Model.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.POActivity", b =>
                {
                    b.HasOne("Raybod.SCM.Domain.Model.User", "ActivityOwner")
                        .WithMany()
                        .HasForeignKey("ActivityOwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Raybod.SCM.Domain.Model.PO", "PO")
                        .WithMany("POActivities")
                        .HasForeignKey("POId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.POActivityTimesheet", b =>
                {
                    b.HasOne("Raybod.SCM.Domain.Model.User", "AdderUser")
                        .WithMany()
                        .HasForeignKey("AdderUserId");

                    b.HasOne("Raybod.SCM.Domain.Model.User", "ModifierUser")
                        .WithMany()
                        .HasForeignKey("ModifierUserId");

                    b.HasOne("Raybod.SCM.Domain.Model.POActivity", "POActivity")
                        .WithMany("ActivityTimesheets")
                        .HasForeignKey("POActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.POComment", b =>
                {
                    b.HasOne("Raybod.SCM.Domain.Model.User", "AdderUser")
                        .WithMany()
                        .HasForeignKey("AdderUserId");

                    b.HasOne("Raybod.SCM.Domain.Model.User", "ModifierUser")
                        .WithMany()
                        .HasForeignKey("ModifierUserId");

                    b.HasOne("Raybod.SCM.Domain.Model.PO", "PO")
                        .WithMany()
                        .HasForeignKey("POId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Raybod.SCM.Domain.Model.POComment", "ParentComment")
                        .WithMany("ReplayComments")
                        .HasForeignKey("ParentCommentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.POCommentUser", b =>
                {
                    b.HasOne("Raybod.SCM.Domain.Model.POComment", "POComment")
                        .WithMany("CommentUsers")
                        .HasForeignKey("POCommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Raybod.SCM.Domain.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.POService", b =>
                {
                    b.HasOne("Raybod.SCM.Domain.Model.PO", "PO")
                        .WithMany("POServices")
                        .HasForeignKey("POId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Raybod.SCM.Domain.Model.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.POStatusLog", b =>
                {
                    b.HasOne("Raybod.SCM.Domain.Model.User", "AdderUser")
                        .WithMany()
                        .HasForeignKey("AdderUserId");

                    b.HasOne("Raybod.SCM.Domain.Model.User", "ModifierUser")
                        .WithMany()
                        .HasForeignKey("ModifierUserId");

                    b.HasOne("Raybod.SCM.Domain.Model.PO", "PO")
                        .WithMany("POStatusLogs")
                        .HasForeignKey("POId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.POSubject", b =>
                {
                    b.HasOne("Raybod.SCM.Domain.Model.MrpItem", "MrpItem")
                        .WithMany("POSubjects")
                        .HasForeignKey("MrpItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Raybod.SCM.Domain.Model.PO", "PO")
                        .WithMany("POSubjects")
                        .HasForeignKey("POId");

                    b.HasOne("Raybod.SCM.Domain.Model.POSubject", "ParentSubject")
                        .WithMany("POSubjectPartLists")
                        .HasForeignKey("ParentSubjectId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Raybod.SCM.Domain.Model.Product", "Product")
                        .WithMany("POSubjects")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.POTermsOfPayment", b =>
                {
                    b.HasOne("Raybod.SCM.Domain.Model.User", "AdderUser")
                        .WithMany()
                        .HasForeignKey("AdderUserId");

                    b.HasOne("Raybod.SCM.Domain.Model.User", "ModifierUser")
                        .WithMany()
                        .HasForeignKey("ModifierUserId");

                    b.HasOne("Raybod.SCM.Domain.Model.PO", "PO")
                        .WithMany("POTermsOfPayments")
                        .HasForeignKey("POId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Raybod.SCM.Domain.Model.PRContract", "PRContract")
                        .WithMany("TermsOfPayments")
                        .HasForeignKey("PRContractId");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.PRConfirmLog", b =>
                {
                    b.HasOne("Raybod.SCM.Domain.Model.User", "AdderUser")
                        .WithMany()
                        .HasForeignKey("AdderUserId");

                    b.HasOne("Raybod.SCM.Domain.Model.User", "ModifierUser")
                        .WithMany()
                        .HasForeignKey("ModifierUserId");

                    b.HasOne("Raybod.SCM.Domain.Model.PurchaseRequest", "PurchaseRequest")
                        .WithMany("PRConfirmLogs")
                        .HasForeignKey("PurchaseRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.PRContract", b =>
                {
                    b.HasOne("Raybod.SCM.Domain.Model.User", "AdderUser")
                        .WithMany()
                        .HasForeignKey("AdderUserId");

                    b.HasOne("Raybod.SCM.Domain.Model.User", "ModifierUser")
                        .WithMany()
                        .HasForeignKey("ModifierUserId");

                    b.HasOne("Raybod.SCM.Domain.Model.ProductGroup", "ProductGroup")
                        .WithMany()
                        .HasForeignKey("ProductGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Raybod.SCM.Domain.Model.Service", null)
                        .WithMany("PRContracts")
                        .HasForeignKey("ServiceId");

                    b.HasOne("Raybod.SCM.Domain.Model.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.PRContractService", b =>
                {
                    b.HasOne("Raybod.SCM.Domain.Model.PRContract", "PRContract")
                        .WithMany("PRContractServices")
                        .HasForeignKey("PRContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Raybod.SCM.Domain.Model.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.PRContractSubject", b =>
                {
                    b.HasOne("Raybod.SCM.Domain.Model.User", "AdderUser")
                        .WithMany()
                        .HasForeignKey("AdderUserId");

                    b.HasOne("Raybod.SCM.Domain.Model.User", "ModifierUser")
                        .WithMany()
                        .HasForeignKey("ModifierUserId");

                    b.HasOne("Raybod.SCM.Domain.Model.PRContract", "PRContract")
                        .WithMany("PRContractSubjects")
                        .HasForeignKey("PRContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Raybod.SCM.Domain.Model.Product", "Product")
                        .WithMany("PRContractSubjects")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Raybod.SCM.Domain.Model.RFPItems", "RFPItem")
                        .WithMany("PRContractSubjects")
                        .HasForeignKey("RFPItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.PRContractSubjectPartList", b =>
                {
                    b.HasOne("Raybod.SCM.Domain.Model.PRContractSubject", "PRContractSubject")
                        .WithMany("PRContractSubjectPartLists")
                        .HasForeignKey("PRContractSubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Raybod.SCM.Domain.Model.Product", "Product")
                        .WithMany("PRContractSubjectPartLists")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.Pack", b =>
                {
                    b.HasOne("Raybod.SCM.Domain.Model.User", "AdderUser")
                        .WithMany()
                        .HasForeignKey("AdderUserId");

                    b.HasOne("Raybod.SCM.Domain.Model.User", "ModifierUser")
                        .WithMany()
                        .HasForeignKey("ModifierUserId");

                    b.HasOne("Raybod.SCM.Domain.Model.PO", "PO")
                        .WithMany("Packs")
                        .HasForeignKey("POId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.PackSubject", b =>
                {
                    b.HasOne("Raybod.SCM.Domain.Model.Pack", "Pack")
                        .WithMany("PackSubjects")
                        .HasForeignKey("PackId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Raybod.SCM.Domain.Model.PackSubject", "ParentSubject")
                        .WithMany("PackSubjectPartLists")
                        .HasForeignKey("ParentSubjectId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Raybod.SCM.Domain.Model.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.Payment", b =>
                {
                    b.HasOne("Raybod.SCM.Domain.Model.User", "AdderUser")
                        .WithMany()
                        .HasForeignKey("AdderUserId");

                    b.HasOne("Raybod.SCM.Domain.Model.Contract", "Contract")
                        .WithMany("Payments")
                        .HasForeignKey("ContractCode");

                    b.HasOne("Raybod.SCM.Domain.Model.User", "ModifierUser")
                        .WithMany()
                        .HasForeignKey("ModifierUserId");

                    b.HasOne("Raybod.SCM.Domain.Model.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.PaymentAttachment", b =>
                {
                    b.HasOne("Raybod.SCM.Domain.Model.User", "AdderUser")
                        .WithMany()
                        .HasForeignKey("AdderUserId");

                    b.HasOne("Raybod.SCM.Domain.Model.Invoice", "Invoice")
                        .WithMany("Attachments")
                        .HasForeignKey("InvoiceId");

                    b.HasOne("Raybod.SCM.Domain.Model.User", "ModifierUser")
                        .WithMany()
                        .HasForeignKey("ModifierUserId");

                    b.HasOne("Raybod.SCM.Domain.Model.Payment", "Payment")
                        .WithMany("PaymentAttachments")
                        .HasForeignKey("PaymentId");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.PaymentPendingForPayment", b =>
                {
                    b.HasOne("Raybod.SCM.Domain.Model.Payment", "Payment")
                        .WithMany("PaymentPendingForPayments")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Raybod.SCM.Domain.Model.PendingForPayment", "PendingForPayment")
                        .WithMany("PaymentPendingForPayments")
                        .HasForeignKey("PendingForPaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.PendingForPayment", b =>
                {
                    b.HasOne("Raybod.SCM.Domain.Model.User", "AdderUser")
                        .WithMany()
                        .HasForeignKey("AdderUserId");

                    b.HasOne("Raybod.SCM.Domain.Model.Contract", "Contract")
                        .WithMany("PendingForPayments")
                        .HasForeignKey("BaseContractCode");

                    b.HasOne("Raybod.SCM.Domain.Model.Invoice", "Invoice")
                        .WithMany()
                        .HasForeignKey("InvoiceId");

                    b.HasOne("Raybod.SCM.Domain.Model.User", "ModifierUser")
                        .WithMany()
                        .HasForeignKey("ModifierUserId");

                    b.HasOne("Raybod.SCM.Domain.Model.PO", "PO")
                        .WithMany()
                        .HasForeignKey("POId");

                    b.HasOne("Raybod.SCM.Domain.Model.POTermsOfPayment", "POTermsOfPayment")
                        .WithMany()
                        .HasForeignKey("POTermsOfPaymentId");

                    b.HasOne("Raybod.SCM.Domain.Model.PRContract", "PRContract")
                        .WithMany()
                        .HasForeignKey("PRContractId");

                    b.HasOne("Raybod.SCM.Domain.Model.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.Product", b =>
                {
                    b.HasOne("Raybod.SCM.Domain.Model.User", "AdderUser")
                        .WithMany()
                        .HasForeignKey("AdderUserId");

                    b.HasOne("Raybod.SCM.Domain.Model.User", "ModifierUser")
                        .WithMany()
                        .HasForeignKey("ModifierUserId");

                    b.HasOne("Raybod.SCM.Domain.Model.ProductGroup", "ProductGroup")
                        .WithMany("Products")
                        .HasForeignKey("ProductGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.ProductGroup", b =>
                {
                    b.HasOne("Raybod.SCM.Domain.Model.User", "AdderUser")
                        .WithMany()
                        .HasForeignKey("AdderUserId");

                    b.HasOne("Raybod.SCM.Domain.Model.User", "ModifierUser")
                        .WithMany()
                        .HasForeignKey("ModifierUserId");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.PurchaseRequest", b =>
                {
                    b.HasOne("Raybod.SCM.Domain.Model.User", "AdderUser")
                        .WithMany()
                        .HasForeignKey("AdderUserId");

                    b.HasOne("Raybod.SCM.Domain.Model.Contract", "Contract")
                        .WithMany("PurchaseRequests")
                        .HasForeignKey("ContractCode");

                    b.HasOne("Raybod.SCM.Domain.Model.User", "ModifierUser")
                        .WithMany()
                        .HasForeignKey("ModifierUserId");

                    b.HasOne("Raybod.SCM.Domain.Model.Mrp", "Mrp")
                        .WithMany()
                        .HasForeignKey("MrpId");

                    b.HasOne("Raybod.SCM.Domain.Model.ProductGroup", "ProductGroup")
                        .WithMany()
                        .HasForeignKey("ProductGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.PurchaseRequestItem", b =>
                {
                    b.HasOne("Raybod.SCM.Domain.Model.User", "AdderUser")
                        .WithMany()
                        .HasForeignKey("AdderUserId");

                    b.HasOne("Raybod.SCM.Domain.Model.User", "ModifierUser")
                        .WithMany()
                        .HasForeignKey("ModifierUserId");

                    b.HasOne("Raybod.SCM.Domain.Model.Product", "Product")
                        .WithMany("PurchaseRequestItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Raybod.SCM.Domain.Model.PurchaseRequest", "PurchaseRequest")
                        .WithMany("PurchaseRequestItems")
                        .HasForeignKey("PurchaseRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.QualityControl", b =>
                {
                    b.HasOne("Raybod.SCM.Domain.Model.User", "AdderUser")
                        .WithMany()
                        .HasForeignKey("AdderUserId");

                    b.HasOne("Raybod.SCM.Domain.Model.User", "ModifierUser")
                        .WithMany()
                        .HasForeignKey("ModifierUserId");

                    b.HasOne("Raybod.SCM.Domain.Model.Pack", "Pack")
                        .WithMany("QualityControls")
                        .HasForeignKey("PackId");

                    b.HasOne("Raybod.SCM.Domain.Model.Receipt", "Receipt")
                        .WithOne("QualityControl")
                        .HasForeignKey("Raybod.SCM.Domain.Model.QualityControl", "ReceiptId");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.RFP", b =>
                {
                    b.HasOne("Raybod.SCM.Domain.Model.User", "AdderUser")
                        .WithMany()
                        .HasForeignKey("AdderUserId");

                    b.HasOne("Raybod.SCM.Domain.Model.Contract", "Contract")
                        .WithMany("RFPs")
                        .HasForeignKey("ContractCode");

                    b.HasOne("Raybod.SCM.Domain.Model.User", "ModifierUser")
                        .WithMany()
                        .HasForeignKey("ModifierUserId");

                    b.HasOne("Raybod.SCM.Domain.Model.ProductGroup", "ProductGroup")
                        .WithMany()
                        .HasForeignKey("ProductGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.RFPAttachment", b =>
                {
                    b.HasOne("Raybod.SCM.Domain.Model.User", "AdderUser")
                        .WithMany()
                        .HasForeignKey("AdderUserId");

                    b.HasOne("Raybod.SCM.Domain.Model.User", "ModifierUser")
                        .WithMany()
                        .HasForeignKey("ModifierUserId");

                    b.HasOne("Raybod.SCM.Domain.Model.RFPComment", "RFPComment")
                        .WithMany("Attachments")
                        .HasForeignKey("RFPCommentId");

                    b.HasOne("Raybod.SCM.Domain.Model.RFP", "RFP")
                        .WithMany("RFPAttachments")
                        .HasForeignKey("RFPId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Raybod.SCM.Domain.Model.RFPInquery", "RFPInquery")
                        .WithMany("RFPInqueryAttachments")
                        .HasForeignKey("RFPInqueryId");

                    b.HasOne("Raybod.SCM.Domain.Model.RFPSupplierProposal", "RFPSupplierProposal")
                        .WithMany("RFPSupplierInqueryAttachments")
                        .HasForeignKey("RFPSupplierProposalId");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.RFPComment", b =>
                {
                    b.HasOne("Raybod.SCM.Domain.Model.User", "AdderUser")
                        .WithMany()
                        .HasForeignKey("AdderUserId");

                    b.HasOne("Raybod.SCM.Domain.Model.User", "ModifierUser")
                        .WithMany()
                        .HasForeignKey("ModifierUserId");

                    b.HasOne("Raybod.SCM.Domain.Model.RFPComment", "ParentComment")
                        .WithMany("ReplayComments")
                        .HasForeignKey("ParentCommentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Raybod.SCM.Domain.Model.RFPSupplier", "RFPSupplier")
                        .WithMany("RFPComments")
                        .HasForeignKey("RFPSupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.RFPCommentInquery", b =>
                {
                    b.HasOne("Raybod.SCM.Domain.Model.RFPComment", "RFPSupplierComment")
                        .WithMany("RFPCommentInqueries")
                        .HasForeignKey("RFPInqueryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Raybod.SCM.Domain.Model.RFPInquery", "RFPInquery")
                        .WithMany("RFPCommentInqueries")
                        .HasForeignKey("RFPInqueryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.RFPCommentUser", b =>
                {
                    b.HasOne("Raybod.SCM.Domain.Model.RFPComment", "RFPComment")
                        .WithMany("RFPCommentUsers")
                        .HasForeignKey("RFPCommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Raybod.SCM.Domain.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.RFPInquery", b =>
                {
                    b.HasOne("Raybod.SCM.Domain.Model.User", "AdderUser")
                        .WithMany()
                        .HasForeignKey("AdderUserId");

                    b.HasOne("Raybod.SCM.Domain.Model.User", "ModifierUser")
                        .WithMany()
                        .HasForeignKey("ModifierUserId");

                    b.HasOne("Raybod.SCM.Domain.Model.RFP", "RFP")
                        .WithMany("RFPInqueries")
                        .HasForeignKey("RFPId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.RFPItems", b =>
                {
                    b.HasOne("Raybod.SCM.Domain.Model.User", "AdderUser")
                        .WithMany()
                        .HasForeignKey("AdderUserId");

                    b.HasOne("Raybod.SCM.Domain.Model.User", "ModifierUser")
                        .WithMany()
                        .HasForeignKey("ModifierUserId");

                    b.HasOne("Raybod.SCM.Domain.Model.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Raybod.SCM.Domain.Model.PurchaseRequestItem", "PurchaseRequestItem")
                        .WithMany("RFPItems")
                        .HasForeignKey("PurchaseRequestItemId");

                    b.HasOne("Raybod.SCM.Domain.Model.RFP", "RFP")
                        .WithMany("RFPItems")
                        .HasForeignKey("RFPId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.RFPStatusLog", b =>
                {
                    b.HasOne("Raybod.SCM.Domain.Model.RFP", "RFP")
                        .WithMany("RFPStatusLogs")
                        .HasForeignKey("RFPId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.RFPSupplier", b =>
                {
                    b.HasOne("Raybod.SCM.Domain.Model.User", "AdderUser")
                        .WithMany()
                        .HasForeignKey("AdderUserId");

                    b.HasOne("Raybod.SCM.Domain.Model.User", "ModifierUser")
                        .WithMany()
                        .HasForeignKey("ModifierUserId");

                    b.HasOne("Raybod.SCM.Domain.Model.RFP", "RFP")
                        .WithMany("RFPSuppliers")
                        .HasForeignKey("RFPId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Raybod.SCM.Domain.Model.Supplier", "Supplier")
                        .WithMany("RFPSuppliers")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.RFPSupplierProposal", b =>
                {
                    b.HasOne("Raybod.SCM.Domain.Model.User", "AdderUser")
                        .WithMany()
                        .HasForeignKey("AdderUserId");

                    b.HasOne("Raybod.SCM.Domain.Model.User", "ModifierUser")
                        .WithMany()
                        .HasForeignKey("ModifierUserId");

                    b.HasOne("Raybod.SCM.Domain.Model.RFPInquery", "RFPInquery")
                        .WithMany("RFPSupplierProposal")
                        .HasForeignKey("RFPInqueryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Raybod.SCM.Domain.Model.RFPSupplier", "RFPSupplier")
                        .WithMany("RFPSupplierProposals")
                        .HasForeignKey("RFPSupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.Receipt", b =>
                {
                    b.HasOne("Raybod.SCM.Domain.Model.User", "AdderUser")
                        .WithMany()
                        .HasForeignKey("AdderUserId");

                    b.HasOne("Raybod.SCM.Domain.Model.Invoice", "Invoice")
                        .WithMany("Receipts")
                        .HasForeignKey("InvoiceId");

                    b.HasOne("Raybod.SCM.Domain.Model.User", "ModifierUser")
                        .WithMany()
                        .HasForeignKey("ModifierUserId");

                    b.HasOne("Raybod.SCM.Domain.Model.PO", "PO")
                        .WithMany("Receipts")
                        .HasForeignKey("POId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Raybod.SCM.Domain.Model.Pack", "Pack")
                        .WithOne("Receipt")
                        .HasForeignKey("Raybod.SCM.Domain.Model.Receipt", "PackId");

                    b.HasOne("Raybod.SCM.Domain.Model.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.ReceiptReject", b =>
                {
                    b.HasOne("Raybod.SCM.Domain.Model.User", "AdderUser")
                        .WithMany()
                        .HasForeignKey("AdderUserId");

                    b.HasOne("Raybod.SCM.Domain.Model.Invoice", "Invoice")
                        .WithOne("ReceiptReject")
                        .HasForeignKey("Raybod.SCM.Domain.Model.ReceiptReject", "InvoiceId");

                    b.HasOne("Raybod.SCM.Domain.Model.User", "ModifierUser")
                        .WithMany()
                        .HasForeignKey("ModifierUserId");

                    b.HasOne("Raybod.SCM.Domain.Model.PO", "PO")
                        .WithMany("ReceiptRejects")
                        .HasForeignKey("POId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Raybod.SCM.Domain.Model.Pack", "Pack")
                        .WithMany()
                        .HasForeignKey("PackId");

                    b.HasOne("Raybod.SCM.Domain.Model.Receipt", "Receipt")
                        .WithMany("ReceiptRejects")
                        .HasForeignKey("ReceiptId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Raybod.SCM.Domain.Model.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.ReceiptRejectSubject", b =>
                {
                    b.HasOne("Raybod.SCM.Domain.Model.ReceiptRejectSubject", "ParentSubject")
                        .WithMany("ReceiptRejectSubjectPartLists")
                        .HasForeignKey("ParentSubjectId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Raybod.SCM.Domain.Model.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Raybod.SCM.Domain.Model.ReceiptReject", "ReceiptReject")
                        .WithMany("ReceiptRejectSubjects")
                        .HasForeignKey("ReceiptRejectId");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.ReceiptSubject", b =>
                {
                    b.HasOne("Raybod.SCM.Domain.Model.ReceiptSubject", "ParentSubject")
                        .WithMany("ReceiptSubjectPartLists")
                        .HasForeignKey("ParentSubjectId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Raybod.SCM.Domain.Model.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Raybod.SCM.Domain.Model.Receipt", "Receipt")
                        .WithMany("ReceiptSubjects")
                        .HasForeignKey("ReceiptId");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.RevisionActivity", b =>
                {
                    b.HasOne("Raybod.SCM.Domain.Model.User", "ActivityOwner")
                        .WithMany()
                        .HasForeignKey("ActivityOwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Raybod.SCM.Domain.Model.DocumentRevision", "DocumentRevision")
                        .WithMany("RevisionActivities")
                        .HasForeignKey("RevisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.RevisionActivityTimesheet", b =>
                {
                    b.HasOne("Raybod.SCM.Domain.Model.User", "AdderUser")
                        .WithMany()
                        .HasForeignKey("AdderUserId");

                    b.HasOne("Raybod.SCM.Domain.Model.User", "ModifierUser")
                        .WithMany()
                        .HasForeignKey("ModifierUserId");

                    b.HasOne("Raybod.SCM.Domain.Model.RevisionActivity", "RevisionActivity")
                        .WithMany("RevisionActivityTimesheets")
                        .HasForeignKey("RevisionActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.RevisionAttachment", b =>
                {
                    b.HasOne("Raybod.SCM.Domain.Model.User", "AdderUser")
                        .WithMany()
                        .HasForeignKey("AdderUserId");

                    b.HasOne("Raybod.SCM.Domain.Model.ConfirmationWorkFlow", "ConfirmationWorkFlow")
                        .WithMany("ConfirmationAttachments")
                        .HasForeignKey("ConfirmationWorkFlowId");

                    b.HasOne("Raybod.SCM.Domain.Model.DocumentRevision", "DocumentRevision")
                        .WithMany("RevisionAttachments")
                        .HasForeignKey("DocumentRevisionId");

                    b.HasOne("Raybod.SCM.Domain.Model.User", "ModifierUser")
                        .WithMany()
                        .HasForeignKey("ModifierUserId");

                    b.HasOne("Raybod.SCM.Domain.Model.RevisionActivityTimesheet", "RevisionActivityTimesheet")
                        .WithMany("ActivityTimesheetAttachments")
                        .HasForeignKey("RevisionActivityTimesheetId");

                    b.HasOne("Raybod.SCM.Domain.Model.RevisionComment", "RevisionComment")
                        .WithMany("Attachments")
                        .HasForeignKey("RevisionCommentId");

                    b.HasOne("Raybod.SCM.Domain.Model.Transmittal", "Transmittal")
                        .WithMany("Attachments")
                        .HasForeignKey("TransmittalId");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.RevisionComment", b =>
                {
                    b.HasOne("Raybod.SCM.Domain.Model.User", "AdderUser")
                        .WithMany()
                        .HasForeignKey("AdderUserId");

                    b.HasOne("Raybod.SCM.Domain.Model.DocumentRevision", "DocumentRevision")
                        .WithMany("RevisionComments")
                        .HasForeignKey("DocumentRevisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Raybod.SCM.Domain.Model.User", "ModifierUser")
                        .WithMany()
                        .HasForeignKey("ModifierUserId");

                    b.HasOne("Raybod.SCM.Domain.Model.RevisionComment", "ParentComment")
                        .WithMany("ReplayComments")
                        .HasForeignKey("ParentCommentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.RevisionCommentUser", b =>
                {
                    b.HasOne("Raybod.SCM.Domain.Model.RevisionComment", "RevisionComment")
                        .WithMany("RevisionCommentUsers")
                        .HasForeignKey("RevisionCommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Raybod.SCM.Domain.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.SCMAuditLog", b =>
                {
                    b.HasOne("Raybod.SCM.Domain.Model.Contract", "Contract")
                        .WithMany("SCMAuditLogs")
                        .HasForeignKey("BaseContractCode");

                    b.HasOne("Raybod.SCM.Domain.Model.DocumentGroup", "DocumentGroup")
                        .WithMany()
                        .HasForeignKey("DocumentGroupId");

                    b.HasOne("Raybod.SCM.Domain.Model.User", "PerformerUser")
                        .WithMany()
                        .HasForeignKey("PerformerUserId");

                    b.HasOne("Raybod.SCM.Domain.Model.ProductGroup", "ProductGroup")
                        .WithMany()
                        .HasForeignKey("ProductGroupId");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.Service", b =>
                {
                    b.HasOne("Raybod.SCM.Domain.Model.User", "AdderUser")
                        .WithMany()
                        .HasForeignKey("AdderUserId");

                    b.HasOne("Raybod.SCM.Domain.Model.User", "ModifierUser")
                        .WithMany()
                        .HasForeignKey("ModifierUserId");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.StatusOperation", b =>
                {
                    b.HasOne("Raybod.SCM.Domain.Model.User", "AdderUser")
                        .WithMany()
                        .HasForeignKey("AdderUserId");

                    b.HasOne("Raybod.SCM.Domain.Model.User", "ModifierUser")
                        .WithMany()
                        .HasForeignKey("ModifierUserId");

                    b.HasOne("Raybod.SCM.Domain.Model.Operation", "Operation")
                        .WithMany("OperationStatuses")
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.Supplier", b =>
                {
                    b.HasOne("Raybod.SCM.Domain.Model.User", "AdderUser")
                        .WithMany()
                        .HasForeignKey("AdderUserId");

                    b.HasOne("Raybod.SCM.Domain.Model.User", "ModifierUser")
                        .WithMany()
                        .HasForeignKey("ModifierUserId");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.SupplierProductGroup", b =>
                {
                    b.HasOne("Raybod.SCM.Domain.Model.ProductGroup", "ProductGroup")
                        .WithMany("SupplierProductGroups")
                        .HasForeignKey("ProductGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Raybod.SCM.Domain.Model.Supplier", "Supplier")
                        .WithMany("SupplierProductGroups")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.TeamWork", b =>
                {
                    b.HasOne("Raybod.SCM.Domain.Model.Contract", "Contract")
                        .WithOne("TeamWork")
                        .HasForeignKey("Raybod.SCM.Domain.Model.TeamWork", "ContractCode");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.TeamWorkUser", b =>
                {
                    b.HasOne("Raybod.SCM.Domain.Model.TeamWork", "TeamWork")
                        .WithMany("TeamWorkUsers")
                        .HasForeignKey("TeamWorkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Raybod.SCM.Domain.Model.User", "User")
                        .WithMany("TeamWorkUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.TeamWorkUserDocumentGroup", b =>
                {
                    b.HasOne("Raybod.SCM.Domain.Model.DocumentGroup", "DocumentGroup")
                        .WithMany()
                        .HasForeignKey("DocumentGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Raybod.SCM.Domain.Model.TeamWorkUser", "TeamWorkUser")
                        .WithMany("TeamWorkUserDocumentGroups")
                        .HasForeignKey("TeamWorkUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.TeamWorkUserProductGroup", b =>
                {
                    b.HasOne("Raybod.SCM.Domain.Model.ProductGroup", "ProductGroup")
                        .WithMany("TeamWorkUserProductGroups")
                        .HasForeignKey("ProductGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Raybod.SCM.Domain.Model.TeamWorkUser", "TeamWorkUser")
                        .WithMany("TeamWorkUserProductGroups")
                        .HasForeignKey("TeamWorkUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.TeamWorkUserRole", b =>
                {
                    b.HasOne("Raybod.SCM.Domain.Model.Role", "Role")
                        .WithMany("TeamWorkUserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Raybod.SCM.Domain.Model.TeamWorkUser", "TeamWorkUser")
                        .WithMany("TeamWorkUserRoles")
                        .HasForeignKey("TeamWorkUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.TeamWorkUserWarehouse", b =>
                {
                    b.HasOne("Raybod.SCM.Domain.Model.TeamWorkUser", "TeamWorkUser")
                        .WithMany("TeamWorkUserWarehouses")
                        .HasForeignKey("TeamWorkUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Raybod.SCM.Domain.Model.Warehouse", "Warehouse")
                        .WithMany("TeamWorkUserWarehouses")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.Transmittal", b =>
                {
                    b.HasOne("Raybod.SCM.Domain.Model.User", "AdderUser")
                        .WithMany()
                        .HasForeignKey("AdderUserId");

                    b.HasOne("Raybod.SCM.Domain.Model.Consultant", "Consultant")
                        .WithMany()
                        .HasForeignKey("ConsultantId");

                    b.HasOne("Raybod.SCM.Domain.Model.Contract", "Contract")
                        .WithMany("Transmittals")
                        .HasForeignKey("ContractCode");

                    b.HasOne("Raybod.SCM.Domain.Model.DocumentGroup", "DocumentGroup")
                        .WithMany()
                        .HasForeignKey("DocumentGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Raybod.SCM.Domain.Model.User", "ModifierUser")
                        .WithMany()
                        .HasForeignKey("ModifierUserId");

                    b.HasOne("Raybod.SCM.Domain.Model.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.TransmittalRevision", b =>
                {
                    b.HasOne("Raybod.SCM.Domain.Model.DocumentRevision", "DocumentRevision")
                        .WithMany("TransmittalRevisions")
                        .HasForeignKey("DocumentRevisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Raybod.SCM.Domain.Model.Transmittal", "Transmittal")
                        .WithMany("TransmittalRevisions")
                        .HasForeignKey("TransmittalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.UserInvisibleTeamWork", b =>
                {
                    b.HasOne("Raybod.SCM.Domain.Model.User", "User")
                        .WithMany("UserInvisibleTeamWorks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.UserNotification", b =>
                {
                    b.HasOne("Raybod.SCM.Domain.Model.Notification", "Notification")
                        .WithMany("UserNotifications")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Raybod.SCM.Domain.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.UserSeenSCMAuditLog", b =>
                {
                    b.HasOne("Raybod.SCM.Domain.Model.SCMAuditLog", "SCMAuditLog")
                        .WithMany("UserSeenSCMAuditLogs")
                        .HasForeignKey("SCMAuditLogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Raybod.SCM.Domain.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.Warehouse", b =>
                {
                    b.HasOne("Raybod.SCM.Domain.Model.User", "AdderUser")
                        .WithMany()
                        .HasForeignKey("AdderUserId");

                    b.HasOne("Raybod.SCM.Domain.Model.User", "ModifierUser")
                        .WithMany()
                        .HasForeignKey("ModifierUserId");
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.WarehouseProduct", b =>
                {
                    b.HasOne("Raybod.SCM.Domain.Model.User", "AdderUser")
                        .WithMany()
                        .HasForeignKey("AdderUserId");

                    b.HasOne("Raybod.SCM.Domain.Model.User", "ModifierUser")
                        .WithMany()
                        .HasForeignKey("ModifierUserId");

                    b.HasOne("Raybod.SCM.Domain.Model.Product", "Product")
                        .WithMany("WarehouseProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Raybod.SCM.Domain.Model.WarehouseProductStockLogs", b =>
                {
                    b.HasOne("Raybod.SCM.Domain.Model.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Raybod.SCM.Domain.Model.Receipt", "Receipt")
                        .WithMany()
                        .HasForeignKey("ReceiptId");

                    b.HasOne("Raybod.SCM.Domain.Model.ReceiptReject", "WarehouseTransference")
                        .WithMany()
                        .HasForeignKey("WarehouseTransferenceId");
                });
#pragma warning restore 612, 618
        }
    }
}
